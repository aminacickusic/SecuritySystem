
PMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f24  08009f24  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f2c  08009f2c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000a28  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aa4  20000aa4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000168a8  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000380e  00000000  00000000  00036997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d0  00000000  00000000  0003a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000db0  00000000  00000000  0003b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023d80  00000000  00000000  0003c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017575  00000000  00000000  0005fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc4bf  00000000  00000000  0007741d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050b4  00000000  00000000  001438dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00148990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e00 	.word	0x08009e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009e00 	.word	0x08009e00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <DWT_Delay_Init+0x58>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <DWT_Delay_Init+0x58>)
 8000db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000db6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <DWT_Delay_Init+0x58>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <DWT_Delay_Init+0x58>)
 8000dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dc2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <DWT_Delay_Init+0x5c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <DWT_Delay_Init+0x5c>)
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <DWT_Delay_Init+0x5c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <DWT_Delay_Init+0x5c>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <DWT_Delay_Init+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000de2:	bf00      	nop
     __ASM volatile ("NOP");
 8000de4:	bf00      	nop
  __ASM volatile ("NOP");
 8000de6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <DWT_Delay_Init+0x5c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000df0:	2300      	movs	r3, #0
 8000df2:	e000      	b.n	8000df6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000df4:	2301      	movs	r3, #1
  }
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000edf0 	.word	0xe000edf0
 8000e04:	e0001000 	.word	0xe0001000

08000e08 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <DWT_Delay_us+0x40>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e16:	f004 f8d7 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <DWT_Delay_us+0x44>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	0c9b      	lsrs	r3, r3, #18
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e2c:	bf00      	nop
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <DWT_Delay_us+0x40>)
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d3f8      	bcc.n	8000e2e <DWT_Delay_us+0x26>
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e0001000 	.word	0xe0001000
 8000e4c:	431bde83 	.word	0x431bde83

08000e50 <Read_HCSR04>:
uint32_t sensor_time;
float distance;
uint8_t data = 0;

uint32_t Read_HCSR04()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4813      	ldr	r0, [pc, #76]	; (8000eac <Read_HCSR04+0x5c>)
 8000e60:	f001 f9d6 	bl	8002210 <HAL_GPIO_WritePin>
	DWT_Delay_us(5);
 8000e64:	2005      	movs	r0, #5
 8000e66:	f7ff ffcf 	bl	8000e08 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	480f      	ldr	r0, [pc, #60]	; (8000eac <Read_HCSR04+0x5c>)
 8000e70:	f001 f9ce 	bl	8002210 <HAL_GPIO_WritePin>



	while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)));
 8000e74:	bf00      	nop
 8000e76:	2104      	movs	r1, #4
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <Read_HCSR04+0x5c>)
 8000e7a:	f001 f9b1 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f8      	beq.n	8000e76 <Read_HCSR04+0x26>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e84:	e005      	b.n	8000e92 <Read_HCSR04+0x42>
	{
		local_time++;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
		DWT_Delay_us(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ffbb 	bl	8000e08 <DWT_Delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e92:	2104      	movs	r1, #4
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <Read_HCSR04+0x5c>)
 8000e96:	f001 f9a3 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f2      	bne.n	8000e86 <Read_HCSR04+0x36>
	}

	return local_time * 2;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	005b      	lsls	r3, r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020000 	.word	0x40020000

08000eb0 <check_uart_for_q>:



void check_uart_for_q()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    if (HAL_UART_Receive(&huart5, &data, 1, 10) == HAL_OK)
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	490b      	ldr	r1, [pc, #44]	; (8000ee8 <check_uart_for_q+0x38>)
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <check_uart_for_q+0x3c>)
 8000ebc:	f004 fa1c 	bl	80052f8 <HAL_UART_Receive>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <check_uart_for_q+0x32>
    {
        if (data == 'q')
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <check_uart_for_q+0x38>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b71      	cmp	r3, #113	; 0x71
 8000ecc:	d109      	bne.n	8000ee2 <check_uart_for_q+0x32>
        {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <check_uart_for_q+0x40>)
 8000ed6:	f001 f99b 	bl	8002210 <HAL_GPIO_WritePin>
            print_uart("-> 'q' key pressed. Stopping the system.\n");
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <check_uart_for_q+0x44>)
 8000edc:	f000 fbc8 	bl	8001670 <print_uart>
            while (1);
 8000ee0:	e7fe      	b.n	8000ee0 <check_uart_for_q+0x30>
        }
    }
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000194 	.word	0x20000194
 8000eec:	20000144 	.word	0x20000144
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	08009e18 	.word	0x08009e18

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 fe2c 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f906 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 f9fc 	bl	8001300 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f08:	f000 f96c 	bl	80011e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f0c:	f000 f998 	bl	8001240 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f10:	f007 ffb8 	bl	8008e84 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000f14:	f000 f9ca 	bl	80012ac <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000f18:	f7ff ff46 	bl	8000da8 <DWT_Delay_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f1c:	f007 ffd8 	bl	8008ed0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


	  sensor_time = Read_HCSR04();
 8000f20:	f7ff ff96 	bl	8000e50 <Read_HCSR04>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a74      	ldr	r2, [pc, #464]	; (80010f8 <main+0x200>)
 8000f28:	6013      	str	r3, [r2, #0]
	  distance = (sensor_time * .034) / 2;
 8000f2a:	4b73      	ldr	r3, [pc, #460]	; (80010f8 <main+0x200>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fae0 	bl	80004f4 <__aeabi_ui2d>
 8000f34:	a36e      	add	r3, pc, #440	; (adr r3, 80010f0 <main+0x1f8>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff fb55 	bl	80005e8 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4e:	f7ff fc75 	bl	800083c <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fd57 	bl	8000a0c <__aeabi_d2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a66      	ldr	r2, [pc, #408]	; (80010fc <main+0x204>)
 8000f62:	6013      	str	r3, [r2, #0]


	  if(distance <= 3) {
 8000f64:	4b65      	ldr	r3, [pc, #404]	; (80010fc <main+0x204>)
 8000f66:	edd3 7a00 	vldr	s15, [r3]
 8000f6a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d826      	bhi.n	8000fc6 <main+0xce>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f7e:	4860      	ldr	r0, [pc, #384]	; (8001100 <main+0x208>)
 8000f80:	f001 f946 	bl	8002210 <HAL_GPIO_WritePin>
		  print_uart("-> Priblizavate se objektu. Udaljenost izmedju vas je:  %f \n", distance);
 8000f84:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <main+0x204>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fad5 	bl	8000538 <__aeabi_f2d>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	ec43 2b10 	vmov	d0, r2, r3
 8000f96:	485b      	ldr	r0, [pc, #364]	; (8001104 <main+0x20c>)
 8000f98:	f000 fb6a 	bl	8001670 <print_uart>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	4859      	ldr	r0, [pc, #356]	; (8001108 <main+0x210>)
 8000fa4:	f001 f934 	bl	8002210 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fac:	f000 fe46 	bl	8001c3c <HAL_Delay>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4854      	ldr	r0, [pc, #336]	; (8001108 <main+0x210>)
 8000fb8:	f001 f92a 	bl	8002210 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc0:	f000 fe3c 	bl	8001c3c <HAL_Delay>
 8000fc4:	e08c      	b.n	80010e0 <main+0x1e8>

	  }
	  else if(distance >= 4 && distance <= 13)
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <main+0x204>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	db22      	blt.n	8001020 <main+0x128>
 8000fda:	4b48      	ldr	r3, [pc, #288]	; (80010fc <main+0x204>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d818      	bhi.n	8001020 <main+0x128>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000ff4:	4842      	ldr	r0, [pc, #264]	; (8001100 <main+0x208>)
 8000ff6:	f001 f90b 	bl	8002210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001000:	483f      	ldr	r0, [pc, #252]	; (8001100 <main+0x208>)
 8001002:	f001 f905 	bl	8002210 <HAL_GPIO_WritePin>
		  print_uart("-> Priblizavate se objektu. Kriticna udaljenost izmedju vas je:  %f \n", distance);
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <main+0x204>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa94 	bl	8000538 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ec43 2b10 	vmov	d0, r2, r3
 8001018:	483c      	ldr	r0, [pc, #240]	; (800110c <main+0x214>)
 800101a:	f000 fb29 	bl	8001670 <print_uart>
	  {
 800101e:	e05f      	b.n	80010e0 <main+0x1e8>



	  }
	  else if(distance > 13 && distance <= 20)
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <main+0x204>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	dd22      	ble.n	800107a <main+0x182>
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <main+0x204>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800103e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d818      	bhi.n	800107a <main+0x182>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800104e:	482c      	ldr	r0, [pc, #176]	; (8001100 <main+0x208>)
 8001050:	f001 f8de 	bl	8002210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800105a:	4829      	ldr	r0, [pc, #164]	; (8001100 <main+0x208>)
 800105c:	f001 f8d8 	bl	8002210 <HAL_GPIO_WritePin>
		  print_uart("-> Priblizavate se objektu. Udaljenost izmedju vas je:  %f \n", distance);
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <main+0x204>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa67 	bl	8000538 <__aeabi_f2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	ec43 2b10 	vmov	d0, r2, r3
 8001072:	4824      	ldr	r0, [pc, #144]	; (8001104 <main+0x20c>)
 8001074:	f000 fafc 	bl	8001670 <print_uart>
	  {
 8001078:	e032      	b.n	80010e0 <main+0x1e8>



	  }
	  else if(distance > 20 && distance <= 25)
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <main+0x204>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	dd22      	ble.n	80010d4 <main+0x1dc>
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <main+0x204>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	d818      	bhi.n	80010d4 <main+0x1dc>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <main+0x208>)
 80010aa:	f001 f8b1 	bl	8002210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80010b4:	4812      	ldr	r0, [pc, #72]	; (8001100 <main+0x208>)
 80010b6:	f001 f8ab 	bl	8002210 <HAL_GPIO_WritePin>
		  print_uart("-> Priblizavate se objektu. Udaljenost izmedju vas je:  %f \n", distance);
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <main+0x204>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa3a 	bl	8000538 <__aeabi_f2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	ec43 2b10 	vmov	d0, r2, r3
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <main+0x20c>)
 80010ce:	f000 facf 	bl	8001670 <print_uart>
	  {
 80010d2:	e005      	b.n	80010e0 <main+0x1e8>

	  }
	  else
	  {

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <main+0x208>)
 80010dc:	f001 f898 	bl	8002210 <HAL_GPIO_WritePin>


	  }

      check_uart_for_q();
 80010e0:	f7ff fee6 	bl	8000eb0 <check_uart_for_q>
	  HAL_Delay(100);
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f000 fda9 	bl	8001c3c <HAL_Delay>
    MX_USB_HOST_Process();
 80010ea:	e717      	b.n	8000f1c <main+0x24>
 80010ec:	f3af 8000 	nop.w
 80010f0:	b020c49c 	.word	0xb020c49c
 80010f4:	3fa16872 	.word	0x3fa16872
 80010f8:	2000018c 	.word	0x2000018c
 80010fc:	20000190 	.word	0x20000190
 8001100:	40020c00 	.word	0x40020c00
 8001104:	08009e44 	.word	0x08009e44
 8001108:	40020800 	.word	0x40020800
 800110c:	08009e84 	.word	0x08009e84

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2230      	movs	r2, #48	; 0x30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f008 fa96 	bl	8009650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <SystemClock_Config+0xcc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <SystemClock_Config+0xcc>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemClock_Config+0xcc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <SystemClock_Config+0xd0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <SystemClock_Config+0xd0>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001184:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800118e:	2307      	movs	r3, #7
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fab2 	bl	8004700 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a2:	f000 fa21 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2105      	movs	r1, #5
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fd13 	bl	8004bf0 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011d0:	f000 fa0a 	bl	80015e8 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C1_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C1_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C1_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C1_Init+0x50>)
 8001222:	f003 f929 	bl	8004478 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800122c:	f000 f9dc 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000098 	.word	0x20000098
 8001238:	40005400 	.word	0x40005400
 800123c:	000186a0 	.word	0x000186a0

08001240 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_SPI1_Init+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_SPI1_Init+0x64>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_SPI1_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_SPI1_Init+0x64>)
 800126c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001270:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_SPI1_Init+0x64>)
 800128c:	220a      	movs	r2, #10
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001292:	f003 fecd 	bl	8005030 <HAL_SPI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800129c:	f000 f9a4 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000ec 	.word	0x200000ec
 80012a8:	40013000 	.word	0x40013000

080012ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_UART5_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_UART5_Init+0x4c>)
 80012e4:	f003 ff2d 	bl	8005142 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f97b 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000144 	.word	0x20000144
 80012fc:	40005000 	.word	0x40005000

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	4bad      	ldr	r3, [pc, #692]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4aac      	ldr	r2, [pc, #688]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4baa      	ldr	r3, [pc, #680]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	4ba6      	ldr	r3, [pc, #664]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4aa5      	ldr	r2, [pc, #660]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4ba3      	ldr	r3, [pc, #652]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b9f      	ldr	r3, [pc, #636]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a9e      	ldr	r2, [pc, #632]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b9c      	ldr	r3, [pc, #624]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b98      	ldr	r3, [pc, #608]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a97      	ldr	r2, [pc, #604]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b95      	ldr	r3, [pc, #596]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b91      	ldr	r3, [pc, #580]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a90      	ldr	r2, [pc, #576]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b8e      	ldr	r3, [pc, #568]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b8a      	ldr	r3, [pc, #552]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a89      	ldr	r2, [pc, #548]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b87      	ldr	r3, [pc, #540]	; (80015d0 <MX_GPIO_Init+0x2d0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	4884      	ldr	r0, [pc, #528]	; (80015d4 <MX_GPIO_Init+0x2d4>)
 80013c4:	f000 ff24 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	4882      	ldr	r0, [pc, #520]	; (80015d8 <MX_GPIO_Init+0x2d8>)
 80013ce:	f000 ff1f 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	4881      	ldr	r0, [pc, #516]	; (80015dc <MX_GPIO_Init+0x2dc>)
 80013d8:	f000 ff1a 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|external_diode_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2122      	movs	r1, #34	; 0x22
 80013e0:	487f      	ldr	r0, [pc, #508]	; (80015e0 <MX_GPIO_Init+0x2e0>)
 80013e2:	f000 ff15 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013e6:	2200      	movs	r2, #0
 80013e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013ec:	487d      	ldr	r0, [pc, #500]	; (80015e4 <MX_GPIO_Init+0x2e4>)
 80013ee:	f000 ff0f 	bl	8002210 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f8:	4877      	ldr	r0, [pc, #476]	; (80015d8 <MX_GPIO_Init+0x2d8>)
 80013fa:	f000 ff09 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013fe:	2308      	movs	r3, #8
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	486f      	ldr	r0, [pc, #444]	; (80015d4 <MX_GPIO_Init+0x2d4>)
 8001416:	f000 fd47 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800141a:	2301      	movs	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4869      	ldr	r0, [pc, #420]	; (80015d8 <MX_GPIO_Init+0x2d8>)
 8001432:	f000 fd39 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001436:	2308      	movs	r3, #8
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001446:	2305      	movs	r3, #5
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4861      	ldr	r0, [pc, #388]	; (80015d8 <MX_GPIO_Init+0x2d8>)
 8001452:	f000 fd29 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800145a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	485c      	ldr	r0, [pc, #368]	; (80015dc <MX_GPIO_Init+0x2dc>)
 800146c:	f000 fd1c 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4855      	ldr	r0, [pc, #340]	; (80015dc <MX_GPIO_Init+0x2dc>)
 8001488:	f000 fd0e 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148c:	2304      	movs	r3, #4
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	484f      	ldr	r0, [pc, #316]	; (80015dc <MX_GPIO_Init+0x2dc>)
 80014a0:	f000 fd02 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014a4:	2310      	movs	r3, #16
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b4:	2306      	movs	r3, #6
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4847      	ldr	r0, [pc, #284]	; (80015dc <MX_GPIO_Init+0x2dc>)
 80014c0:	f000 fcf2 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4841      	ldr	r0, [pc, #260]	; (80015e0 <MX_GPIO_Init+0x2e0>)
 80014dc:	f000 fce4 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014e0:	2304      	movs	r3, #4
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	483b      	ldr	r0, [pc, #236]	; (80015e0 <MX_GPIO_Init+0x2e0>)
 80014f4:	f000 fcd8 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800150a:	2305      	movs	r3, #5
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4832      	ldr	r0, [pc, #200]	; (80015e0 <MX_GPIO_Init+0x2e0>)
 8001516:	f000 fcc7 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800151a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800151e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	482c      	ldr	r0, [pc, #176]	; (80015e4 <MX_GPIO_Init+0x2e4>)
 8001534:	f000 fcb8 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin;
 8001538:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154a:	2306      	movs	r3, #6
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4820      	ldr	r0, [pc, #128]	; (80015d8 <MX_GPIO_Init+0x2d8>)
 8001556:	f000 fca7 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800155a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001564:	2302      	movs	r3, #2
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4819      	ldr	r0, [pc, #100]	; (80015d8 <MX_GPIO_Init+0x2d8>)
 8001574:	f000 fc98 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001578:	2320      	movs	r3, #32
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_GPIO_Init+0x2e4>)
 800158c:	f000 fc8c 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : external_diode_Pin */
  GPIO_InitStruct.Pin = external_diode_Pin;
 8001590:	2320      	movs	r3, #32
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(external_diode_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <MX_GPIO_Init+0x2e0>)
 80015a8:	f000 fc7e 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015b0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_GPIO_Init+0x2d4>)
 80015c2:	f000 fc71 	bl	8001ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	; 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <put_char_uart>:
#include "stm32f4xx_hal.h"
#include "peripheral_init.h"


void put_char_uart(uint8_t data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart5, &data, 1, 1000);
 8001602:	1df9      	adds	r1, r7, #7
 8001604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001608:	2201      	movs	r2, #1
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <put_char_uart+0x20>)
 800160c:	f003 fde9 	bl	80051e2 <HAL_UART_Transmit>

	return;
 8001610:	bf00      	nop
}
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000144 	.word	0x20000144

0800161c <print_string_uart>:

	return data;
}

void print_string_uart(uint8_t * str)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	uint16_t k = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	81fb      	strh	r3, [r7, #14]

	while (str[k] != '\0')
 8001628:	e016      	b.n	8001658 <print_string_uart+0x3c>
    {
		put_char_uart(str[k]);
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffe0 	bl	80015f8 <put_char_uart>
        if (str[k] == '\n')
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b0a      	cmp	r3, #10
 8001642:	d102      	bne.n	800164a <print_string_uart+0x2e>
        	put_char_uart('\r');
 8001644:	200d      	movs	r0, #13
 8001646:	f7ff ffd7 	bl	80015f8 <put_char_uart>
        k++;
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	3301      	adds	r3, #1
 800164e:	81fb      	strh	r3, [r7, #14]

        if (k == MAX_PRINT_STRING_SIZE)
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001656:	d006      	beq.n	8001666 <print_string_uart+0x4a>
	while (str[k] != '\0')
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e2      	bne.n	800162a <print_string_uart+0xe>
            break;
    }

	return;
 8001664:	e000      	b.n	8001668 <print_string_uart+0x4c>
            break;
 8001666:	bf00      	nop
	return;
 8001668:	bf00      	nop
}
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <print_uart>:




void print_uart(char *str, ... )
{
 8001670:	b40f      	push	{r0, r1, r2, r3}
 8001672:	b580      	push	{r7, lr}
 8001674:	b094      	sub	sp, #80	; 0x50
 8001676:	af00      	add	r7, sp, #0
    uint8_t rstr[40];
    uint16_t k = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t * p_uint32;
    float ftmp;
    char * p_char;
    va_list vl;

    va_start(vl, str);
 800167e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001682:	603b      	str	r3, [r7, #0]
    while(str[k] != 0x00)
 8001684:	e08f      	b.n	80017a6 <print_uart+0x136>
    {
        if(str[k] == '%')
 8001686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800168a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b25      	cmp	r3, #37	; 0x25
 8001692:	d171      	bne.n	8001778 <print_uart+0x108>
        {
            if(str[k+1] != 0x00)
 8001694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001698:	3301      	adds	r3, #1
 800169a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d07b      	beq.n	800179c <print_uart+0x12c>
            {
                switch(str[k+1])
 80016a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016a8:	3301      	adds	r3, #1
 80016aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b66      	cmp	r3, #102	; 0x66
 80016b2:	d15b      	bne.n	800176c <print_uart+0xfc>
                {

                    case('f'):
                    {// float
                        ftmp = va_arg(vl, double);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3307      	adds	r3, #7
 80016b8:	f023 0307 	bic.w	r3, r3, #7
 80016bc:	f103 0208 	add.w	r2, r3, #8
 80016c0:	603a      	str	r2, [r7, #0]
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff f99f 	bl	8000a0c <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c

                        int intPart = (int)ftmp;
 80016d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016da:	ee17 3a90 	vmov	r3, s15
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
                        float decimalPart = ftmp - intPart;
 80016e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                        int decimalLength = 4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
                        int decimalMultiplier = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
                        for (int i = 0; i < decimalLength; ++i) {
 80016fe:	2300      	movs	r3, #0
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
 8001702:	e010      	b.n	8001726 <print_uart+0xb6>
                            decimalMultiplier *= 10;
 8001704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	647b      	str	r3, [r7, #68]	; 0x44
                            decimalPart *= 10;
 8001710:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001714:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                        for (int i = 0; i < decimalLength; ++i) {
 8001720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001722:	3301      	adds	r3, #1
 8001724:	643b      	str	r3, [r7, #64]	; 0x40
 8001726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	429a      	cmp	r2, r3
 800172c:	dbea      	blt.n	8001704 <print_uart+0x94>
                        }
                        int decPart = (int)decimalPart;
 800172e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	633b      	str	r3, [r7, #48]	; 0x30

                        // Print integer part
                        sprintf((char *)rstr, "%d.", intPart);
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001740:	4920      	ldr	r1, [pc, #128]	; (80017c4 <print_uart+0x154>)
 8001742:	4618      	mov	r0, r3
 8001744:	f007 ff64 	bl	8009610 <siprintf>
                        print_string_uart(rstr);
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff66 	bl	800161c <print_string_uart>

                        // Print decimal part
                        sprintf((char *)rstr, "%d", decPart);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001754:	491c      	ldr	r1, [pc, #112]	; (80017c8 <print_uart+0x158>)
 8001756:	4618      	mov	r0, r3
 8001758:	f007 ff5a 	bl	8009610 <siprintf>
                        print_string_uart(rstr);
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff5c 	bl	800161c <print_string_uart>

                        arg_type = (PRINT_ARG_TYPE_FLOAT);
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 800176a:	bf00      	nop
                    }

                }
                k++;
 800176c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001770:	3301      	adds	r3, #1
 8001772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001776:	e011      	b.n	800179c <print_uart+0x12c>
            }
        }
        else
        {
            put_char_uart(str[k]);
 8001778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800177c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff38 	bl	80015f8 <put_char_uart>
            if (str[k] == '\n')
 8001788:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800178c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0a      	cmp	r3, #10
 8001794:	d102      	bne.n	800179c <print_uart+0x12c>
                put_char_uart('\r');
 8001796:	200d      	movs	r0, #13
 8001798:	f7ff ff2e 	bl	80015f8 <put_char_uart>
        }
        k++;
 800179c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    while(str[k] != 0x00)
 80017a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f47f af68 	bne.w	8001686 <print_uart+0x16>
    }

    va_end(vl);
    return;
 80017b6:	bf00      	nop
}
 80017b8:	3750      	adds	r7, #80	; 0x50
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017c0:	b004      	add	sp, #16
 80017c2:	4770      	bx	lr
 80017c4:	08009ecc 	.word	0x08009ecc
 80017c8:	08009ed0 	.word	0x08009ed0

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_MspInit+0x4c>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a08      	ldr	r2, [pc, #32]	; (8001818 <HAL_MspInit+0x4c>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800180a:	2007      	movs	r0, #7
 800180c:	f000 fb0a 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_I2C_MspInit+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12c      	bne.n	8001898 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800185a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001860:	2312      	movs	r3, #18
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001864:	2301      	movs	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800186c:	2304      	movs	r3, #4
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <HAL_I2C_MspInit+0x8c>)
 8001878:	f000 fb16 	bl	8001ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_SPI_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12b      	bne.n	8001926 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_SPI_MspInit+0x88>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_SPI_MspInit+0x88>)
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_SPI_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_SPI_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_SPI_MspInit+0x88>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_SPI_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001906:	23e0      	movs	r3, #224	; 0xe0
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001916:	2305      	movs	r3, #5
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_SPI_MspInit+0x8c>)
 8001922:	f000 fac1 	bl	8001ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40013000 	.word	0x40013000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a28      	ldr	r2, [pc, #160]	; (80019fc <HAL_UART_MspInit+0xc0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d14a      	bne.n	80019f4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 8001968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_UART_MspInit+0xc4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019c4:	2308      	movs	r3, #8
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <HAL_UART_MspInit+0xc8>)
 80019d0:	f000 fa6a 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019d4:	2304      	movs	r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019e4:	2308      	movs	r3, #8
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <HAL_UART_MspInit+0xcc>)
 80019f0:	f000 fa5a 	bl	8001ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	; 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40005000 	.word	0x40005000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f8d0 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <OTG_FS_IRQHandler+0x10>)
 8001a66:	f000 fecd 	bl	8002804 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000057c 	.word	0x2000057c

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f007 fdec 	bl	8009680 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	20000198 	.word	0x20000198
 8001adc:	20000aa8 	.word	0x20000aa8

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	; (8001b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f007 fdab 	bl	800968c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff f9df 	bl	8000ef8 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b48:	08009f34 	.word	0x08009f34
  ldr r2, =_sbss
 8001b4c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b50:	20000aa4 	.word	0x20000aa4

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f94f 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fe1e 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f967 	bl	8001e8e <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd8:	f000 f92f 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	2000019c 	.word	0x2000019c

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000019c 	.word	0x2000019c

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e04:	f7ff ff8e 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff29 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff3e 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff8e 	bl	8001d78 <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5d 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff31 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffa2 	bl	8001de0 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e16b      	b.n	800219c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 815a 	bne.w	8002196 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80b4 	beq.w	8002196 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a5f      	ldr	r2, [pc, #380]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <HAL_GPIO_Init+0x310>)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_GPIO_Init+0x314>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_GPIO_Init+0x318>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d025      	beq.n	80020ca <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_GPIO_Init+0x31c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x320>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x324>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x328>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x32c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x330>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x20a>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e00e      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ce:	2300      	movs	r3, #0
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e0:	4935      	ldr	r1, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x310>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_GPIO_Init+0x334>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002112:	4a32      	ldr	r2, [pc, #200]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_GPIO_Init+0x334>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_GPIO_Init+0x334>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002166:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_GPIO_Init+0x334>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	f67f ae90 	bls.w	8001ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40021400 	.word	0x40021400
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40021c00 	.word	0x40021c00
 80021dc:	40013c00 	.word	0x40013c00

080021e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	619a      	str	r2, [r3, #24]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af02      	add	r7, sp, #8
 8002248:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e059      	b.n	8002308 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f006 fe66 	bl	8008f40 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002282:	d102      	bne.n	800228a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fc6f 	bl	8005b72 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7c1a      	ldrb	r2, [r3, #16]
 800229c:	f88d 2000 	strb.w	r2, [sp]
 80022a0:	3304      	adds	r3, #4
 80022a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a4:	f003 fbf0 	bl	8005a88 <USB_CoreInit>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e026      	b.n	8002308 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fc67 	bl	8005b94 <USB_SetCurrentMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e017      	b.n	8002308 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7c1a      	ldrb	r2, [r3, #16]
 80022e0:	f88d 2000 	strb.w	r2, [sp]
 80022e4:	3304      	adds	r3, #4
 80022e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e8:	f003 fe0a 	bl	8005f00 <USB_HostInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e004      	b.n	8002308 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af04      	add	r7, sp, #16
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	460b      	mov	r3, r1
 8002324:	70bb      	strb	r3, [r7, #2]
 8002326:	4613      	mov	r3, r2
 8002328:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800232a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800232c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_HCD_HC_Init+0x2c>
 8002338:	2302      	movs	r3, #2
 800233a:	e09d      	b.n	8002478 <HAL_HCD_HC_Init+0x168>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3319      	adds	r3, #25
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3314      	adds	r3, #20
 8002368:	787a      	ldrb	r2, [r7, #1]
 800236a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3315      	adds	r3, #21
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3326      	adds	r3, #38	; 0x26
 8002390:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002394:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800239e:	b2d8      	uxtb	r0, r3
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3316      	adds	r3, #22
 80023ae:	4602      	mov	r2, r0
 80023b0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fbc8 	bl	8002b4c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80023bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da0a      	bge.n	80023da <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3317      	adds	r3, #23
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e009      	b.n	80023ee <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3317      	adds	r3, #23
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fee8 	bl	80061c8 <USB_GetHostSpeed>
 80023f8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80023fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10b      	bne.n	800241a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002402:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_HCD_HC_Init+0x10a>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2bbc      	cmp	r3, #188	; 0xbc
 8002414:	d901      	bls.n	800241a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002416:	23bc      	movs	r3, #188	; 0xbc
 8002418:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3318      	adds	r3, #24
 800242a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800242e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	b298      	uxth	r0, r3
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3328      	adds	r3, #40	; 0x28
 8002444:	4602      	mov	r2, r0
 8002446:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	b29b      	uxth	r3, r3
 8002450:	787c      	ldrb	r4, [r7, #1]
 8002452:	78ba      	ldrb	r2, [r7, #2]
 8002454:	78f9      	ldrb	r1, [r7, #3]
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4623      	mov	r3, r4
 8002466:	f003 fed7 	bl	8006218 <USB_HC_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_HCD_HC_Halt+0x1e>
 800249a:	2302      	movs	r3, #2
 800249c:	e00f      	b.n	80024be <HAL_HCD_HC_Halt+0x3e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fa69 	bl	8006986 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	70fb      	strb	r3, [r7, #3]
 80024da:	460b      	mov	r3, r1
 80024dc:	70bb      	strb	r3, [r7, #2]
 80024de:	4613      	mov	r3, r2
 80024e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3317      	adds	r3, #23
 80024f2:	78ba      	ldrb	r2, [r7, #2]
 80024f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3326      	adds	r3, #38	; 0x26
 8002506:	787a      	ldrb	r2, [r7, #1]
 8002508:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800250a:	7c3b      	ldrb	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d114      	bne.n	800253a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	332a      	adds	r3, #42	; 0x2a
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3319      	adds	r3, #25
 8002534:	7f3a      	ldrb	r2, [r7, #28]
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e009      	b.n	800254e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	332a      	adds	r3, #42	; 0x2a
 800254a:	2202      	movs	r2, #2
 800254c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800254e:	787b      	ldrb	r3, [r7, #1]
 8002550:	2b03      	cmp	r3, #3
 8002552:	f200 8102 	bhi.w	800275a <HAL_HCD_HC_SubmitRequest+0x292>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002745 	.word	0x08002745
 8002564:	08002631 	.word	0x08002631
 8002568:	080026bb 	.word	0x080026bb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800256c:	7c3b      	ldrb	r3, [r7, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	f040 80f5 	bne.w	800275e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002574:	78bb      	ldrb	r3, [r7, #2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d12d      	bne.n	80025d6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800257a:	8b3b      	ldrh	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	333d      	adds	r3, #61	; 0x3d
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	333d      	adds	r3, #61	; 0x3d
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	332a      	adds	r3, #42	; 0x2a
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80025be:	e0ce      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	332a      	adds	r3, #42	; 0x2a
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]
      break;
 80025d4:	e0c3      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	331a      	adds	r3, #26
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 80b8 	bne.w	800275e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	333c      	adds	r3, #60	; 0x3c
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	332a      	adds	r3, #42	; 0x2a
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
      break;
 8002618:	e0a1      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	332a      	adds	r3, #42	; 0x2a
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	e096      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002630:	78bb      	ldrb	r3, [r7, #2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d120      	bne.n	8002678 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	333d      	adds	r3, #61	; 0x3d
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	332a      	adds	r3, #42	; 0x2a
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002660:	e07e      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	332a      	adds	r3, #42	; 0x2a
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e073      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	333c      	adds	r3, #60	; 0x3c
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	332a      	adds	r3, #42	; 0x2a
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	e05d      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	332a      	adds	r3, #42	; 0x2a
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      break;
 80026b8:	e052      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026ba:	78bb      	ldrb	r3, [r7, #2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d120      	bne.n	8002702 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	333d      	adds	r3, #61	; 0x3d
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	332a      	adds	r3, #42	; 0x2a
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ea:	e039      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	332a      	adds	r3, #42	; 0x2a
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      break;
 8002700:	e02e      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	333c      	adds	r3, #60	; 0x3c
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	332a      	adds	r3, #42	; 0x2a
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
      break;
 800272c:	e018      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	332a      	adds	r3, #42	; 0x2a
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
      break;
 8002742:	e00d      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	332a      	adds	r3, #42	; 0x2a
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
      break;
 8002758:	e002      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800275e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	332c      	adds	r3, #44	; 0x2c
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	8b39      	ldrh	r1, [r7, #24]
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	3334      	adds	r3, #52	; 0x34
 8002786:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	; 0x4c
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3338      	adds	r3, #56	; 0x38
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3315      	adds	r3, #21
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334d      	adds	r3, #77	; 0x4d
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	3310      	adds	r3, #16
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	1d19      	adds	r1, r3, #4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	799b      	ldrb	r3, [r3, #6]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f003 fe3c 	bl	8006470 <USB_HC_StartXfer>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fb30 	bl	8005e80 <USB_GetMode>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	f040 80fb 	bne.w	8002a1e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 faf3 	bl	8005e18 <USB_ReadInterrupts>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80f1 	beq.w	8002a1c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 faea 	bl	8005e18 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284e:	d104      	bne.n	800285a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002858:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fada 	bl	8005e18 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286e:	d104      	bne.n	800287a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 faca 	bl	8005e18 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800288a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800288e:	d104      	bne.n	800289a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 faba 	bl	8005e18 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d103      	bne.n	80028b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2202      	movs	r2, #2
 80028b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 faac 	bl	8005e18 <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ca:	d120      	bne.n	800290e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028e6:	2110      	movs	r1, #16
 80028e8:	6938      	ldr	r0, [r7, #16]
 80028ea:	f003 f99f 	bl	8005c2c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028ee:	6938      	ldr	r0, [r7, #16]
 80028f0:	f003 f9ce 	bl	8005c90 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7a5b      	ldrb	r3, [r3, #9]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d105      	bne.n	8002908 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fbc0 	bl	8006088 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f006 fb97 	bl	800903c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fa80 	bl	8005e18 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002922:	d102      	bne.n	800292a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 fd33 	bl	8004390 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fa72 	bl	8005e18 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d106      	bne.n	800294c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 fb60 	bl	8009004 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fa61 	bl	8005e18 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002960:	d139      	bne.n	80029d6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fffc 	bl	8006964 <USB_HC_ReadInterrupt>
 800296c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e025      	b.n	80029c0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299e:	d106      	bne.n	80029ae <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f905 	bl	8002bb6 <HCD_HC_IN_IRQHandler>
 80029ac:	e005      	b.n	80029ba <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 ff67 	bl	8003888 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	461a      	mov	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d3d3      	bcc.n	8002974 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fa1c 	bl	8005e18 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d101      	bne.n	80029ee <HAL_HCD_IRQHandler+0x1ea>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_HCD_IRQHandler+0x1ec>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d014      	beq.n	8002a1e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0210 	bic.w	r2, r2, #16
 8002a02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 fbe4 	bl	80041d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0210 	orr.w	r2, r2, #16
 8002a18:	619a      	str	r2, [r3, #24]
 8002a1a:	e000      	b.n	8002a1e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002a1c:	bf00      	nop
    }
  }
}
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_HCD_Start+0x16>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e013      	b.n	8002a62 <HAL_HCD_Start+0x3e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fb84 	bl	8006156 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 f87c 	bl	8005b50 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_HCD_Stop+0x16>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e00d      	b.n	8002a9c <HAL_HCD_Stop+0x32>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 f8d7 	bl	8006c40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fb26 	bl	8006102 <USB_ResetPort>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334c      	adds	r3, #76	; 0x4c
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3338      	adds	r3, #56	; 0x38
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fb68 	bl	80061f6 <USB_GetCurrentFrame>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fb43 	bl	80061c8 <USB_GetHostSpeed>
 8002b42:	4603      	mov	r3, r0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	331a      	adds	r3, #26
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3325      	adds	r3, #37	; 0x25
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3324      	adds	r3, #36	; 0x24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 f932 	bl	8005e3e <USB_ReadChInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d11a      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334d      	adds	r3, #77	; 0x4d
 8002c06:	2207      	movs	r2, #7
 8002c08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 feb7 	bl	8006986 <USB_HC_Halt>
 8002c18:	e09e      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 f90b 	bl	8005e3e <USB_ReadChInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c32:	d11b      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334d      	adds	r3, #77	; 0x4d
 8002c58:	2208      	movs	r2, #8
 8002c5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 fe8e 	bl	8006986 <USB_HC_Halt>
 8002c6a:	e075      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f8e2 	bl	8005e3e <USB_ReadChInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11a      	bne.n	8002cba <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	2308      	movs	r3, #8
 8002c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334d      	adds	r3, #77	; 0x4d
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fe67 	bl	8006986 <USB_HC_Halt>
 8002cb8:	e04e      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f8bb 	bl	8005e3e <USB_ReadChInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d11b      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	; 0x4d
 8002cf8:	2209      	movs	r2, #9
 8002cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fe3e 	bl	8006986 <USB_HC_Halt>
 8002d0a:	e025      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 f892 	bl	8005e3e <USB_ReadChInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d119      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	334d      	adds	r3, #77	; 0x4d
 8002d46:	2207      	movs	r2, #7
 8002d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fe17 	bl	8006986 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 f86c 	bl	8005e3e <USB_ReadChInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d112      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fe03 	bl	8006986 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	f000 bd75 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 f84c 	bl	8005e3e <USB_ReadChInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 8128 	bne.w	8003002 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	331b      	adds	r3, #27
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d119      	bne.n	8002e0e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	331b      	adds	r3, #27
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	799b      	ldrb	r3, [r3, #6]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3330      	adds	r3, #48	; 0x30
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	1ac9      	subs	r1, r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4403      	add	r3, r0
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	334d      	adds	r3, #77	; 0x4d
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3344      	adds	r3, #68	; 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	2301      	movs	r3, #1
 8002e86:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3326      	adds	r3, #38	; 0x26
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3326      	adds	r3, #38	; 0x26
 8002eae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d110      	bne.n	8002ed6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fd62 	bl	8006986 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	e03d      	b.n	8002f52 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3326      	adds	r3, #38	; 0x26
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d00a      	beq.n	8002f02 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3326      	adds	r3, #38	; 0x26
 8002efc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d127      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	0151      	lsls	r1, r2, #5
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	440a      	add	r2, r1
 8002f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f20:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	334c      	adds	r3, #76	; 0x4c
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	334c      	adds	r3, #76	; 0x4c
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f006 f883 	bl	8009058 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	799b      	ldrb	r3, [r3, #6]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d13b      	bne.n	8002fd2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3338      	adds	r3, #56	; 0x38
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4403      	add	r3, r0
 8002f7a:	3328      	adds	r3, #40	; 0x28
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	440b      	add	r3, r1
 8002f80:	1e59      	subs	r1, r3, #1
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4403      	add	r3, r0
 8002f90:	3328      	adds	r3, #40	; 0x28
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8470 	beq.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	333c      	adds	r3, #60	; 0x3c
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2d8      	uxtb	r0, r3
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	333c      	adds	r3, #60	; 0x3c
 8002fca:	4602      	mov	r2, r0
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	f000 bc58 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	333c      	adds	r3, #60	; 0x3c
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333c      	adds	r3, #60	; 0x3c
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	f000 bc40 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f002 ff17 	bl	8005e3e <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d131      	bne.n	800307e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	2320      	movs	r3, #32
 800302a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	331a      	adds	r3, #26
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 841f 	bne.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	331b      	adds	r3, #27
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	334d      	adds	r3, #77	; 0x4d
 8003068:	2203      	movs	r2, #3
 800306a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fc86 	bl	8006986 <USB_HC_Halt>
 800307a:	f000 bc02 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fed9 	bl	8005e3e <USB_ReadChInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	f040 8305 	bne.w	80036a2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2302      	movs	r3, #2
 80030a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	; 0x4d
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	334d      	adds	r3, #77	; 0x4d
 80030d0:	2202      	movs	r2, #2
 80030d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334c      	adds	r3, #76	; 0x4c
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e2cc      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	; 0x4d
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b06      	cmp	r3, #6
 80030fe:	d114      	bne.n	800312a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	334d      	adds	r3, #77	; 0x4d
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	; 0x4c
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e2ac      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	; 0x4d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b07      	cmp	r3, #7
 800313e:	d00b      	beq.n	8003158 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334d      	adds	r3, #77	; 0x4d
 8003150:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003152:	2b09      	cmp	r3, #9
 8003154:	f040 80a6 	bne.w	80032a4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334d      	adds	r3, #77	; 0x4d
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3344      	adds	r3, #68	; 0x44
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4403      	add	r3, r0
 800318c:	3344      	adds	r3, #68	; 0x44
 800318e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3344      	adds	r3, #68	; 0x44
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d943      	bls.n	800322e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3344      	adds	r3, #68	; 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	331a      	adds	r3, #26
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d123      	bne.n	8003218 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	331b      	adds	r3, #27
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	331c      	adds	r3, #28
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	0151      	lsls	r1, r2, #5
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	440a      	add	r2, r1
 800320e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003216:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334c      	adds	r3, #76	; 0x4c
 8003228:	2204      	movs	r2, #4
 800322a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800322c:	e229      	b.n	8003682 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	; 0x4c
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3326      	adds	r3, #38	; 0x26
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3326      	adds	r3, #38	; 0x26
 8003268:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800326a:	2b02      	cmp	r3, #2
 800326c:	f040 8209 	bne.w	8003682 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003286:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800328e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a2:	e1ee      	b.n	8003682 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	; 0x4d
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	f040 80c8 	bne.w	800344c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	; 0x4d
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	331b      	adds	r3, #27
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 81ce 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3326      	adds	r3, #38	; 0x26
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d16b      	bne.n	80033d6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3348      	adds	r3, #72	; 0x48
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	3348      	adds	r3, #72	; 0x48
 8003320:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3348      	adds	r3, #72	; 0x48
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d943      	bls.n	80033c0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3348      	adds	r3, #72	; 0x48
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	331b      	adds	r3, #27
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3344      	adds	r3, #68	; 0x44
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d809      	bhi.n	800338a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	331c      	adds	r3, #28
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334c      	adds	r3, #76	; 0x4c
 80033ba:	2204      	movs	r2, #4
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e014      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	334c      	adds	r3, #76	; 0x4c
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e009      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334c      	adds	r3, #76	; 0x4c
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3326      	adds	r3, #38	; 0x26
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3326      	adds	r3, #38	; 0x26
 8003410:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003412:	2b02      	cmp	r3, #2
 8003414:	f040 8136 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800342e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003436:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e11b      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	; 0x4d
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b03      	cmp	r3, #3
 8003460:	f040 8081 	bne.w	8003566 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334d      	adds	r3, #77	; 0x4d
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	331b      	adds	r3, #27
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 80fa 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	; 0x4c
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	0151      	lsls	r1, r2, #5
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	440a      	add	r2, r1
 80034da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	0151      	lsls	r1, r2, #5
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	440a      	add	r2, r1
 80034fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fe:	f023 0320 	bic.w	r3, r3, #32
 8003502:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3326      	adds	r3, #38	; 0x26
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3326      	adds	r3, #38	; 0x26
 800352a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800352c:	2b02      	cmp	r3, #2
 800352e:	f040 80a9 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003548:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003550:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e08e      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	; 0x4d
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d143      	bne.n	8003604 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334d      	adds	r3, #77	; 0x4d
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334c      	adds	r3, #76	; 0x4c
 80035a0:	2202      	movs	r2, #2
 80035a2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3326      	adds	r3, #38	; 0x26
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3326      	adds	r3, #38	; 0x26
 80035ca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d159      	bne.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e03f      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334d      	adds	r3, #77	; 0x4d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d126      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	334d      	adds	r3, #77	; 0x4d
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3344      	adds	r3, #68	; 0x44
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	3344      	adds	r3, #68	; 0x44
 8003650:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334c      	adds	r3, #76	; 0x4c
 8003662:	2204      	movs	r2, #4
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e00d      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334d      	adds	r3, #77	; 0x4d
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	f000 8100 	beq.w	8003880 <HCD_HC_IN_IRQHandler+0xcca>
 8003680:	e000      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003682:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	334c      	adds	r3, #76	; 0x4c
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f005 fcdc 	bl	8009058 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036a0:	e0ef      	b.n	8003882 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 fbc7 	bl	8005e3e <USB_ReadChInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d12f      	bne.n	800371a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	2340      	movs	r3, #64	; 0x40
 80036ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	; 0x4d
 80036dc:	2205      	movs	r2, #5
 80036de:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	331a      	adds	r3, #26
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3344      	adds	r3, #68	; 0x44
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f003 f937 	bl	8006986 <USB_HC_Halt>
 8003718:	e0b3      	b.n	8003882 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fb8b 	bl	8005e3e <USB_ReadChInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	f040 80a7 	bne.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3326      	adds	r3, #38	; 0x26
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d11b      	bne.n	8003782 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3344      	adds	r3, #68	; 0x44
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	334d      	adds	r3, #77	; 0x4d
 800376e:	2204      	movs	r2, #4
 8003770:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 f903 	bl	8006986 <USB_HC_Halt>
 8003780:	e03f      	b.n	8003802 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3326      	adds	r3, #38	; 0x26
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3326      	adds	r3, #38	; 0x26
 80037a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d129      	bne.n	8003802 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3344      	adds	r3, #68	; 0x44
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	799b      	ldrb	r3, [r3, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HCD_HC_IN_IRQHandler+0xc2a>
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	331b      	adds	r3, #27
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	; 0x4d
 80037f0:	2204      	movs	r2, #4
 80037f2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 f8c2 	bl	8006986 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	331b      	adds	r3, #27
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d129      	bne.n	800386c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	331b      	adds	r3, #27
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	440a      	add	r2, r1
 8003842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	440a      	add	r2, r1
 8003862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003866:	f043 0320 	orr.w	r3, r3, #32
 800386a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2310      	movs	r3, #16
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	e000      	b.n	8003882 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003880:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 fac9 	bl	8005e3e <USB_ReadChInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d11b      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2304      	movs	r3, #4
 80038c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	; 0x4d
 80038d8:	2207      	movs	r2, #7
 80038da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 f84e 	bl	8006986 <USB_HC_Halt>
 80038ea:	f000 bc6f 	b.w	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 faa1 	bl	8005e3e <USB_ReadChInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b20      	cmp	r3, #32
 8003904:	f040 8082 	bne.w	8003a0c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	2320      	movs	r3, #32
 8003918:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3319      	adds	r3, #25
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d124      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3319      	adds	r3, #25
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334c      	adds	r3, #76	; 0x4c
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	334d      	adds	r3, #77	; 0x4d
 8003968:	2203      	movs	r2, #3
 800396a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f003 f806 	bl	8006986 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	331a      	adds	r3, #26
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	f040 841d 	bne.w	80041cc <HCD_HC_OUT_IRQHandler+0x944>
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	331b      	adds	r3, #27
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 8411 	bne.w	80041cc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3326      	adds	r3, #38	; 0x26
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d009      	beq.n	80039d4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	331b      	adds	r3, #27
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	334d      	adds	r3, #77	; 0x4d
 80039e4:	2203      	movs	r2, #3
 80039e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 ffc8 	bl	8006986 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3344      	adds	r3, #68	; 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e3df      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 fa12 	bl	8005e3e <USB_ReadChInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d111      	bne.n	8003a4a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	461a      	mov	r2, r3
 8003a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 ff9f 	bl	8006986 <USB_HC_Halt>
 8003a48:	e3c0      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 f9f3 	bl	8005e3e <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d168      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3344      	adds	r3, #68	; 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 f9dd 	bl	8005e3e <USB_ReadChInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d112      	bne.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3319      	adds	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2340      	movs	r3, #64	; 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	331b      	adds	r3, #27
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	331b      	adds	r3, #27
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	; 0x4d
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 ff2a 	bl	8006986 <USB_HC_Halt>
 8003b32:	e34b      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 f97e 	bl	8005e3e <USB_ReadChInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d139      	bne.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	334d      	adds	r3, #77	; 0x4d
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	331a      	adds	r3, #26
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3319      	adds	r3, #25
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	3344      	adds	r3, #68	; 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 feed 	bl	8006986 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	6093      	str	r3, [r2, #8]
 8003bbe:	e305      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f002 f938 	bl	8005e3e <USB_ReadChInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d11a      	bne.n	8003c0e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	461a      	mov	r2, r3
 8003be6:	2308      	movs	r3, #8
 8003be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	; 0x4d
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 febd 	bl	8006986 <USB_HC_Halt>
 8003c0c:	e2de      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f002 f911 	bl	8005e3e <USB_ReadChInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d144      	bne.n	8003cb0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3344      	adds	r3, #68	; 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334d      	adds	r3, #77	; 0x4d
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3319      	adds	r3, #25
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d114      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3318      	adds	r3, #24
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3319      	adds	r3, #25
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f002 fe75 	bl	8006986 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2310      	movs	r3, #16
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	e28d      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 f8c0 	bl	8005e3e <USB_ReadChInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b80      	cmp	r3, #128	; 0x80
 8003cc6:	d169      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	799b      	ldrb	r3, [r3, #6]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334d      	adds	r3, #77	; 0x4d
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 fe4a 	bl	8006986 <USB_HC_Halt>
 8003cf2:	e049      	b.n	8003d88 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3344      	adds	r3, #68	; 0x44
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4403      	add	r3, r0
 8003d14:	3344      	adds	r3, #68	; 0x44
 8003d16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3344      	adds	r3, #68	; 0x44
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d922      	bls.n	8003d74 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3344      	adds	r3, #68	; 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	334c      	adds	r3, #76	; 0x4c
 8003d52:	2204      	movs	r2, #4
 8003d54:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	334c      	adds	r3, #76	; 0x4c
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f005 f973 	bl	8009058 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d72:	e009      	b.n	8003d88 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	334c      	adds	r3, #76	; 0x4c
 8003d84:	2202      	movs	r2, #2
 8003d86:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d94:	461a      	mov	r2, r3
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	6093      	str	r3, [r2, #8]
 8003d9a:	e217      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 f84a 	bl	8005e3e <USB_ReadChInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db4:	d11b      	bne.n	8003dee <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	334d      	adds	r3, #77	; 0x4d
 8003dc6:	2209      	movs	r2, #9
 8003dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fdd7 	bl	8006986 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	e1ee      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 f821 	bl	8005e3e <USB_ReadChInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	f040 81df 	bne.w	80041c6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	461a      	mov	r2, r3
 8003e16:	2302      	movs	r3, #2
 8003e18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334d      	adds	r3, #77	; 0x4d
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f040 8093 	bne.w	8003f58 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	334d      	adds	r3, #77	; 0x4d
 8003e42:	2202      	movs	r2, #2
 8003e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	334c      	adds	r3, #76	; 0x4c
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3326      	adds	r3, #38	; 0x26
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d00b      	beq.n	8003e88 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3326      	adds	r3, #38	; 0x26
 8003e80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	f040 8190 	bne.w	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	799b      	ldrb	r3, [r3, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d115      	bne.n	8003ebc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	333d      	adds	r3, #61	; 0x3d
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	f083 0301 	eor.w	r3, r3, #1
 8003ea8:	b2d8      	uxtb	r0, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	333d      	adds	r3, #61	; 0x3d
 8003eb8:	4602      	mov	r2, r0
 8003eba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	799b      	ldrb	r3, [r3, #6]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 8171 	bne.w	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3334      	adds	r3, #52	; 0x34
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8165 	beq.w	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3334      	adds	r3, #52	; 0x34
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4403      	add	r3, r0
 8003efe:	3328      	adds	r3, #40	; 0x28
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	440b      	add	r3, r1
 8003f04:	1e59      	subs	r1, r3, #1
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4403      	add	r3, r0
 8003f14:	3328      	adds	r3, #40	; 0x28
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f1c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 813f 	beq.w	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	333d      	adds	r3, #61	; 0x3d
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	f083 0301 	eor.w	r3, r3, #1
 8003f42:	b2d8      	uxtb	r0, r3
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	333d      	adds	r3, #61	; 0x3d
 8003f52:	4602      	mov	r2, r0
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e127      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	; 0x4d
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d120      	bne.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	; 0x4d
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	331b      	adds	r3, #27
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 8107 	bne.w	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	334c      	adds	r3, #76	; 0x4c
 8003faa:	2202      	movs	r2, #2
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e0fb      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	334d      	adds	r3, #77	; 0x4d
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d13a      	bne.n	800403c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	334d      	adds	r3, #77	; 0x4d
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	334c      	adds	r3, #76	; 0x4c
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	331b      	adds	r3, #27
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 80d1 	bne.w	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	331b      	adds	r3, #27
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	440a      	add	r2, r1
 8004030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004038:	6053      	str	r3, [r2, #4]
 800403a:	e0b5      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334d      	adds	r3, #77	; 0x4d
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d114      	bne.n	800407c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	334d      	adds	r3, #77	; 0x4d
 8004062:	2202      	movs	r2, #2
 8004064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334c      	adds	r3, #76	; 0x4c
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e095      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	334d      	adds	r3, #77	; 0x4d
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b06      	cmp	r3, #6
 8004090:	d114      	bne.n	80040bc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	334d      	adds	r3, #77	; 0x4d
 80040a2:	2202      	movs	r2, #2
 80040a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	334c      	adds	r3, #76	; 0x4c
 80040b6:	2205      	movs	r2, #5
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e075      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	334d      	adds	r3, #77	; 0x4d
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d00a      	beq.n	80040e8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	334d      	adds	r3, #77	; 0x4d
 80040e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d170      	bne.n	80041ca <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	334d      	adds	r3, #77	; 0x4d
 80040f8:	2202      	movs	r2, #2
 80040fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3344      	adds	r3, #68	; 0x44
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4403      	add	r3, r0
 800411c:	3344      	adds	r3, #68	; 0x44
 800411e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3344      	adds	r3, #68	; 0x44
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d914      	bls.n	8004160 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	3344      	adds	r3, #68	; 0x44
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	334c      	adds	r3, #76	; 0x4c
 800415a:	2204      	movs	r2, #4
 800415c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800415e:	e022      	b.n	80041a6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	334c      	adds	r3, #76	; 0x4c
 8004170:	2202      	movs	r2, #2
 8004172:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800418a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004192:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	461a      	mov	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	334c      	adds	r3, #76	; 0x4c
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f004 ff4a 	bl	8009058 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041c4:	e002      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80041ca:	bf00      	nop
  }
}
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08a      	sub	sp, #40	; 0x28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	0c5b      	lsrs	r3, r3, #17
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004206:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d004      	beq.n	8004218 <HCD_RXQLVL_IRQHandler+0x46>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b05      	cmp	r3, #5
 8004212:	f000 80b6 	beq.w	8004382 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004216:	e0b7      	b.n	8004388 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80b3 	beq.w	8004386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	332c      	adds	r3, #44	; 0x2c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80a7 	beq.w	8004386 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3338      	adds	r3, #56	; 0x38
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	18d1      	adds	r1, r2, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4403      	add	r3, r0
 800425c:	3334      	adds	r3, #52	; 0x34
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4299      	cmp	r1, r3
 8004262:	f200 8083 	bhi.w	800436c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	332c      	adds	r3, #44	; 0x2c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	b292      	uxth	r2, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f001 fd71 	bl	8005d68 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	332c      	adds	r3, #44	; 0x2c
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	18d1      	adds	r1, r2, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4403      	add	r3, r0
 80042aa:	332c      	adds	r3, #44	; 0x2c
 80042ac:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3338      	adds	r3, #56	; 0x38
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	18d1      	adds	r1, r2, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	3338      	adds	r3, #56	; 0x38
 80042d4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	0cdb      	lsrs	r3, r3, #19
 80042e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3328      	adds	r3, #40	; 0x28
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4293      	cmp	r3, r2
 8004304:	d13f      	bne.n	8004386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03c      	beq.n	8004386 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004322:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800432a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	333c      	adds	r3, #60	; 0x3c
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f083 0301 	eor.w	r3, r3, #1
 8004354:	b2d8      	uxtb	r0, r3
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	333c      	adds	r3, #60	; 0x3c
 8004366:	4602      	mov	r2, r0
 8004368:	701a      	strb	r2, [r3, #0]
      break;
 800436a:	e00c      	b.n	8004386 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334c      	adds	r3, #76	; 0x4c
 800437c:	2204      	movs	r2, #4
 800437e:	701a      	strb	r2, [r3, #0]
      break;
 8004380:	e001      	b.n	8004386 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004386:	bf00      	nop
  }
}
 8004388:	bf00      	nop
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80043bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d10b      	bne.n	80043e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d102      	bne.n	80043d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f004 fe24 	bl	8009020 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d132      	bne.n	8004450 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d126      	bne.n	800444a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7a5b      	ldrb	r3, [r3, #9]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d113      	bne.n	800442c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800440a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800440e:	d106      	bne.n	800441e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f001 fe36 	bl	8006088 <USB_InitFSLSPClkSel>
 800441c:	e011      	b.n	8004442 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2101      	movs	r1, #1
 8004424:	4618      	mov	r0, r3
 8004426:	f001 fe2f 	bl	8006088 <USB_InitFSLSPClkSel>
 800442a:	e00a      	b.n	8004442 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	79db      	ldrb	r3, [r3, #7]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800443a:	461a      	mov	r2, r3
 800443c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004440:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f004 fe16 	bl	8009074 <HAL_HCD_PortEnabled_Callback>
 8004448:	e002      	b.n	8004450 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f004 fe20 	bl	8009090 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d103      	bne.n	8004462 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f043 0320 	orr.w	r3, r3, #32
 8004460:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004468:	461a      	mov	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6013      	str	r3, [r2, #0]
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e12b      	b.n	80046e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd f9bc 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	; 0x24
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044dc:	f000 fd80 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4a81      	ldr	r2, [pc, #516]	; (80046ec <HAL_I2C_Init+0x274>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d807      	bhi.n	80044fc <HAL_I2C_Init+0x84>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a80      	ldr	r2, [pc, #512]	; (80046f0 <HAL_I2C_Init+0x278>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bf94      	ite	ls
 80044f4:	2301      	movls	r3, #1
 80044f6:	2300      	movhi	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e006      	b.n	800450a <HAL_I2C_Init+0x92>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a7d      	ldr	r2, [pc, #500]	; (80046f4 <HAL_I2C_Init+0x27c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	bf94      	ite	ls
 8004504:	2301      	movls	r3, #1
 8004506:	2300      	movhi	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0e7      	b.n	80046e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a78      	ldr	r2, [pc, #480]	; (80046f8 <HAL_I2C_Init+0x280>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	0c9b      	lsrs	r3, r3, #18
 800451c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a6a      	ldr	r2, [pc, #424]	; (80046ec <HAL_I2C_Init+0x274>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d802      	bhi.n	800454c <HAL_I2C_Init+0xd4>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3301      	adds	r3, #1
 800454a:	e009      	b.n	8004560 <HAL_I2C_Init+0xe8>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	4a69      	ldr	r2, [pc, #420]	; (80046fc <HAL_I2C_Init+0x284>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	3301      	adds	r3, #1
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	430b      	orrs	r3, r1
 8004566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	495c      	ldr	r1, [pc, #368]	; (80046ec <HAL_I2C_Init+0x274>)
 800457c:	428b      	cmp	r3, r1
 800457e:	d819      	bhi.n	80045b4 <HAL_I2C_Init+0x13c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e59      	subs	r1, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	fbb1 f3f3 	udiv	r3, r1, r3
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004594:	400b      	ands	r3, r1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_I2C_Init+0x138>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1e59      	subs	r1, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	e051      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 80045b0:	2304      	movs	r3, #4
 80045b2:	e04f      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d111      	bne.n	80045e0 <HAL_I2C_Init+0x168>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	440b      	add	r3, r1
 80045ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ce:	3301      	adds	r3, #1
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e012      	b.n	8004606 <HAL_I2C_Init+0x18e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1e58      	subs	r0, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	0099      	lsls	r1, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Init+0x196>
 800460a:	2301      	movs	r3, #1
 800460c:	e022      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <HAL_I2C_Init+0x1bc>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e58      	subs	r0, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	fbb0 f3f3 	udiv	r3, r0, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004632:	e00f      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1e58      	subs	r0, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	0099      	lsls	r1, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	fbb0 f3f3 	udiv	r3, r0, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	6809      	ldr	r1, [r1, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6911      	ldr	r1, [r2, #16]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68d2      	ldr	r2, [r2, #12]
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	430b      	orrs	r3, r1
 8004696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	000186a0 	.word	0x000186a0
 80046f0:	001e847f 	.word	0x001e847f
 80046f4:	003d08ff 	.word	0x003d08ff
 80046f8:	431bde83 	.word	0x431bde83
 80046fc:	10624dd3 	.word	0x10624dd3

08004700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e267      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d075      	beq.n	800480a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471e:	4b88      	ldr	r3, [pc, #544]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00c      	beq.n	8004744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4b85      	ldr	r3, [pc, #532]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004732:	2b08      	cmp	r3, #8
 8004734:	d112      	bne.n	800475c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004736:	4b82      	ldr	r3, [pc, #520]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004742:	d10b      	bne.n	800475c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	4b7e      	ldr	r3, [pc, #504]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d05b      	beq.n	8004808 <HAL_RCC_OscConfig+0x108>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d157      	bne.n	8004808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e242      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d106      	bne.n	8004774 <HAL_RCC_OscConfig+0x74>
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e01d      	b.n	80047b0 <HAL_RCC_OscConfig+0xb0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x98>
 800477e:	4b70      	ldr	r3, [pc, #448]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6f      	ldr	r2, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b6d      	ldr	r3, [pc, #436]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6c      	ldr	r2, [pc, #432]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0xb0>
 8004798:	4b69      	ldr	r3, [pc, #420]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a68      	ldr	r2, [pc, #416]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b66      	ldr	r3, [pc, #408]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a65      	ldr	r2, [pc, #404]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fd fa34 	bl	8001c24 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd fa30 	bl	8001c24 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e207      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0xc0>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd fa20 	bl	8001c24 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd fa1c 	bl	8001c24 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e1f3      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	4b51      	ldr	r3, [pc, #324]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0xe8>
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d063      	beq.n	80048de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004816:	4b4a      	ldr	r3, [pc, #296]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11c      	bne.n	8004868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b44      	ldr	r3, [pc, #272]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCC_OscConfig+0x152>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e1c7      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4937      	ldr	r1, [pc, #220]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	e03a      	b.n	80048de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004870:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_OscConfig+0x244>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd f9d5 	bl	8001c24 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800487e:	f7fd f9d1 	bl	8001c24 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e1a8      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4925      	ldr	r1, [pc, #148]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
 80048b0:	e015      	b.n	80048de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_OscConfig+0x244>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd f9b4 	bl	8001c24 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c0:	f7fd f9b0 	bl	8001c24 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e187      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d036      	beq.n	8004958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_RCC_OscConfig+0x248>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd f994 	bl	8001c24 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004900:	f7fd f990 	bl	8001c24 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e167      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_OscConfig+0x240>)
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x200>
 800491e:	e01b      	b.n	8004958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCC_OscConfig+0x248>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004926:	f7fd f97d 	bl	8001c24 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	e00e      	b.n	800494c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492e:	f7fd f979 	bl	8001c24 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d907      	bls.n	800494c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e150      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
 8004940:	40023800 	.word	0x40023800
 8004944:	42470000 	.word	0x42470000
 8004948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b88      	ldr	r3, [pc, #544]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ea      	bne.n	800492e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8097 	beq.w	8004a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496a:	4b81      	ldr	r3, [pc, #516]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b7d      	ldr	r3, [pc, #500]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	4a7c      	ldr	r2, [pc, #496]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	; 0x40
 8004986:	4b7a      	ldr	r3, [pc, #488]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	4b77      	ldr	r3, [pc, #476]	; (8004b74 <HAL_RCC_OscConfig+0x474>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a2:	4b74      	ldr	r3, [pc, #464]	; (8004b74 <HAL_RCC_OscConfig+0x474>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a73      	ldr	r2, [pc, #460]	; (8004b74 <HAL_RCC_OscConfig+0x474>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ae:	f7fd f939 	bl	8001c24 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fd f935 	bl	8001c24 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e10c      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_OscConfig+0x474>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x2ea>
 80049dc:	4b64      	ldr	r3, [pc, #400]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a63      	ldr	r2, [pc, #396]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
 80049e8:	e01c      	b.n	8004a24 <HAL_RCC_OscConfig+0x324>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x30c>
 80049f2:	4b5f      	ldr	r3, [pc, #380]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a5e      	ldr	r2, [pc, #376]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	4b5c      	ldr	r3, [pc, #368]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a5b      	ldr	r2, [pc, #364]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0x324>
 8004a0c:	4b58      	ldr	r3, [pc, #352]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a57      	ldr	r2, [pc, #348]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
 8004a18:	4b55      	ldr	r3, [pc, #340]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	4a54      	ldr	r2, [pc, #336]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d015      	beq.n	8004a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fd f8fa 	bl	8001c24 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fd f8f6 	bl	8001c24 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0cb      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	4b49      	ldr	r3, [pc, #292]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ee      	beq.n	8004a34 <HAL_RCC_OscConfig+0x334>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a58:	f7fd f8e4 	bl	8001c24 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd f8e0 	bl	8001c24 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0b5      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ee      	bne.n	8004a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80a1 	beq.w	8004be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a9e:	4b34      	ldr	r3, [pc, #208]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d05c      	beq.n	8004b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d141      	bne.n	8004b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_RCC_OscConfig+0x478>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fd f8b4 	bl	8001c24 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd f8b0 	bl	8001c24 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e087      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	019b      	lsls	r3, r3, #6
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	491b      	ldr	r1, [pc, #108]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b08:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x478>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fd f889 	bl	8001c24 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fd f885 	bl	8001c24 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e05c      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x416>
 8004b34:	e054      	b.n	8004be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <HAL_RCC_OscConfig+0x478>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fd f872 	bl	8001c24 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fd f86e 	bl	8001c24 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e045      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x444>
 8004b62:	e03d      	b.n	8004be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e038      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
 8004b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x4ec>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d028      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d121      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d11a      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d111      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0cc      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b68      	ldr	r3, [pc, #416]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d90c      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b63      	ldr	r3, [pc, #396]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0b8      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c44:	4b59      	ldr	r3, [pc, #356]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a58      	ldr	r2, [pc, #352]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c5c:	4b53      	ldr	r3, [pc, #332]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a52      	ldr	r2, [pc, #328]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c68:	4b50      	ldr	r3, [pc, #320]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	494d      	ldr	r1, [pc, #308]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d044      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b47      	ldr	r3, [pc, #284]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d119      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e07f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e06f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e067      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0203 	bic.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4934      	ldr	r1, [pc, #208]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce0:	f7fc ffa0 	bl	8001c24 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fc ff9c 	bl	8001c24 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e04f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 020c 	and.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d20c      	bcs.n	8004d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e032      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4916      	ldr	r1, [pc, #88]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	490e      	ldr	r1, [pc, #56]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d76:	f000 f821 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	490a      	ldr	r1, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	5ccb      	ldrb	r3, [r1, r3]
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc ff00 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023c00 	.word	0x40023c00
 8004dac:	40023800 	.word	0x40023800
 8004db0:	08009ed8 	.word	0x08009ed8
 8004db4:	20000000 	.word	0x20000000
 8004db8:	20000004 	.word	0x20000004

08004dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b094      	sub	sp, #80	; 0x50
 8004dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc8:	2300      	movs	r3, #0
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	2300      	movs	r3, #0
 8004dce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd4:	4b79      	ldr	r3, [pc, #484]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d00d      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x40>
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	f200 80e1 	bhi.w	8004fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dee:	e0db      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df0:	4b73      	ldr	r3, [pc, #460]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004df2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004df4:	e0db      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004df6:	4b73      	ldr	r3, [pc, #460]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dfa:	e0d8      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dfc:	4b6f      	ldr	r3, [pc, #444]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e06:	4b6d      	ldr	r3, [pc, #436]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d063      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e12:	4b6a      	ldr	r3, [pc, #424]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	2200      	movs	r2, #0
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30
 8004e26:	2300      	movs	r3, #0
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e2e:	4622      	mov	r2, r4
 8004e30:	462b      	mov	r3, r5
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	0159      	lsls	r1, r3, #5
 8004e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e40:	0150      	lsls	r0, r2, #5
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4621      	mov	r1, r4
 8004e48:	1a51      	subs	r1, r2, r1
 8004e4a:	6139      	str	r1, [r7, #16]
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e60:	4659      	mov	r1, fp
 8004e62:	018b      	lsls	r3, r1, #6
 8004e64:	4651      	mov	r1, sl
 8004e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	018a      	lsls	r2, r1, #6
 8004e6e:	4651      	mov	r1, sl
 8004e70:	ebb2 0801 	subs.w	r8, r2, r1
 8004e74:	4659      	mov	r1, fp
 8004e76:	eb63 0901 	sbc.w	r9, r3, r1
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8e:	4690      	mov	r8, r2
 8004e90:	4699      	mov	r9, r3
 8004e92:	4623      	mov	r3, r4
 8004e94:	eb18 0303 	adds.w	r3, r8, r3
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	eb49 0303 	adc.w	r3, r9, r3
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	024b      	lsls	r3, r1, #9
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eb8:	4621      	mov	r1, r4
 8004eba:	024a      	lsls	r2, r1, #9
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ecc:	f7fb fdee 	bl	8000aac <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed8:	e058      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	f04f 0000 	mov.w	r0, #0
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	0159      	lsls	r1, r3, #5
 8004f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f06:	0150      	lsls	r0, r2, #5
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f12:	4649      	mov	r1, r9
 8004f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f30:	eb63 050b 	sbc.w	r5, r3, fp
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	00eb      	lsls	r3, r5, #3
 8004f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f42:	00e2      	lsls	r2, r4, #3
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	464b      	mov	r3, r9
 8004f50:	eb45 0303 	adc.w	r3, r5, r3
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f62:	4629      	mov	r1, r5
 8004f64:	028b      	lsls	r3, r1, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	028a      	lsls	r2, r1, #10
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	61fa      	str	r2, [r7, #28]
 8004f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f80:	f7fb fd94 	bl	8000aac <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	3301      	adds	r3, #1
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3750      	adds	r7, #80	; 0x50
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	007a1200 	.word	0x007a1200

08004fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fce:	681b      	ldr	r3, [r3, #0]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000000 	.word	0x20000000

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fe4:	f7ff fff0 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0a9b      	lsrs	r3, r3, #10
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	08009ee8 	.word	0x08009ee8

08005008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800500c:	f7ff ffdc 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0b5b      	lsrs	r3, r3, #13
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <HAL_RCC_GetPCLK2Freq+0x24>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	08009ee8 	.word	0x08009ee8

08005030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e07b      	b.n	800513a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	d108      	bne.n	800505c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005052:	d009      	beq.n	8005068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	61da      	str	r2, [r3, #28]
 800505a:	e005      	b.n	8005068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fc12 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	ea42 0103 	orr.w	r1, r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	f003 0104 	and.w	r1, r3, #4
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0210 	and.w	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005128:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e042      	b.n	80051da <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fc fbe7 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2224      	movs	r2, #36	; 0x24
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005184:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa0a 	bl	80055a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800519a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b08a      	sub	sp, #40	; 0x28
 80051e6:	af02      	add	r7, sp, #8
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d175      	bne.n	80052ee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UART_Transmit+0x2c>
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06e      	b.n	80052f0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2221      	movs	r2, #33	; 0x21
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005220:	f7fc fd00 	bl	8001c24 <HAL_GetTick>
 8005224:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523a:	d108      	bne.n	800524e <HAL_UART_Transmit+0x6c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e003      	b.n	8005256 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005256:	e02e      	b.n	80052b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f8df 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e03a      	b.n	80052f0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	3302      	adds	r3, #2
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e007      	b.n	80052a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1cb      	bne.n	8005258 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f8ab 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e006      	b.n	80052f0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b20      	cmp	r3, #32
 8005316:	f040 8081 	bne.w	800541c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_UART_Receive+0x2e>
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e079      	b.n	800541e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2222      	movs	r2, #34	; 0x22
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800533e:	f7fc fc71 	bl	8001c24 <HAL_GetTick>
 8005342:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d108      	bne.n	800536c <HAL_UART_Receive+0x74>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e003      	b.n	8005374 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005374:	e047      	b.n	8005406 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	2120      	movs	r1, #32
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f850 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e042      	b.n	800541e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	3302      	adds	r3, #2
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e01f      	b.n	80053f8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d007      	beq.n	80053d2 <HAL_UART_Receive+0xda>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <HAL_UART_Receive+0xe8>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e008      	b.n	80053f2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1b2      	bne.n	8005376 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005436:	e03b      	b.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543e:	d037      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005440:	f7fc fbf0 	bl	8001c24 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <UART_WaitOnFlagUntilTimeout+0x30>
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e03a      	b.n	80054d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d023      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d020      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d01d      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b08      	cmp	r3, #8
 8005480:	d116      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f81d 	bl	80054d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2208      	movs	r2, #8
 80054a2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e00f      	b.n	80054d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d0b4      	beq.n	8005438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b095      	sub	sp, #84	; 0x54
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005500:	643a      	str	r2, [r7, #64]	; 0x40
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	61fb      	str	r3, [r7, #28]
   return(result);
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005534:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d119      	bne.n	8005584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f023 0310 	bic.w	r3, r3, #16
 8005566:	647b      	str	r3, [r7, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005570:	61ba      	str	r2, [r7, #24]
 8005572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	613b      	str	r3, [r7, #16]
   return(result);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005592:	bf00      	nop
 8005594:	3754      	adds	r7, #84	; 0x54
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a4:	b0c0      	sub	sp, #256	; 0x100
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	68d9      	ldr	r1, [r3, #12]
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	ea40 0301 	orr.w	r3, r0, r1
 80055c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	431a      	orrs	r2, r3
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055f8:	f021 010c 	bic.w	r1, r1, #12
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005606:	430b      	orrs	r3, r1
 8005608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	6999      	ldr	r1, [r3, #24]
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	ea40 0301 	orr.w	r3, r0, r1
 8005626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b8f      	ldr	r3, [pc, #572]	; (800586c <UART_SetConfig+0x2cc>)
 8005630:	429a      	cmp	r2, r3
 8005632:	d005      	beq.n	8005640 <UART_SetConfig+0xa0>
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b8d      	ldr	r3, [pc, #564]	; (8005870 <UART_SetConfig+0x2d0>)
 800563c:	429a      	cmp	r2, r3
 800563e:	d104      	bne.n	800564a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7ff fce2 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 8005644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005648:	e003      	b.n	8005652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800564a:	f7ff fcc9 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 800564e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565c:	f040 810c 	bne.w	8005878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005664:	2200      	movs	r2, #0
 8005666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800566e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	1891      	adds	r1, r2, r2
 8005678:	65b9      	str	r1, [r7, #88]	; 0x58
 800567a:	415b      	adcs	r3, r3
 800567c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005682:	4621      	mov	r1, r4
 8005684:	eb12 0801 	adds.w	r8, r2, r1
 8005688:	4629      	mov	r1, r5
 800568a:	eb43 0901 	adc.w	r9, r3, r1
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800569a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800569e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056a2:	4690      	mov	r8, r2
 80056a4:	4699      	mov	r9, r3
 80056a6:	4623      	mov	r3, r4
 80056a8:	eb18 0303 	adds.w	r3, r8, r3
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056b0:	462b      	mov	r3, r5
 80056b2:	eb49 0303 	adc.w	r3, r9, r3
 80056b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056ce:	460b      	mov	r3, r1
 80056d0:	18db      	adds	r3, r3, r3
 80056d2:	653b      	str	r3, [r7, #80]	; 0x50
 80056d4:	4613      	mov	r3, r2
 80056d6:	eb42 0303 	adc.w	r3, r2, r3
 80056da:	657b      	str	r3, [r7, #84]	; 0x54
 80056dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056e4:	f7fb f9e2 	bl	8000aac <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4b61      	ldr	r3, [pc, #388]	; (8005874 <UART_SetConfig+0x2d4>)
 80056ee:	fba3 2302 	umull	r2, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	011c      	lsls	r4, r3, #4
 80056f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	1891      	adds	r1, r2, r2
 800570e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005710:	415b      	adcs	r3, r3
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005718:	4641      	mov	r1, r8
 800571a:	eb12 0a01 	adds.w	sl, r2, r1
 800571e:	4649      	mov	r1, r9
 8005720:	eb43 0b01 	adc.w	fp, r3, r1
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005738:	4692      	mov	sl, r2
 800573a:	469b      	mov	fp, r3
 800573c:	4643      	mov	r3, r8
 800573e:	eb1a 0303 	adds.w	r3, sl, r3
 8005742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005746:	464b      	mov	r3, r9
 8005748:	eb4b 0303 	adc.w	r3, fp, r3
 800574c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800575c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005764:	460b      	mov	r3, r1
 8005766:	18db      	adds	r3, r3, r3
 8005768:	643b      	str	r3, [r7, #64]	; 0x40
 800576a:	4613      	mov	r3, r2
 800576c:	eb42 0303 	adc.w	r3, r2, r3
 8005770:	647b      	str	r3, [r7, #68]	; 0x44
 8005772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800577a:	f7fb f997 	bl	8000aac <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4611      	mov	r1, r2
 8005784:	4b3b      	ldr	r3, [pc, #236]	; (8005874 <UART_SetConfig+0x2d4>)
 8005786:	fba3 2301 	umull	r2, r3, r3, r1
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2264      	movs	r2, #100	; 0x64
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	1acb      	subs	r3, r1, r3
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800579a:	4b36      	ldr	r3, [pc, #216]	; (8005874 <UART_SetConfig+0x2d4>)
 800579c:	fba3 2302 	umull	r2, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a8:	441c      	add	r4, r3
 80057aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057bc:	4642      	mov	r2, r8
 80057be:	464b      	mov	r3, r9
 80057c0:	1891      	adds	r1, r2, r2
 80057c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80057c4:	415b      	adcs	r3, r3
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057cc:	4641      	mov	r1, r8
 80057ce:	1851      	adds	r1, r2, r1
 80057d0:	6339      	str	r1, [r7, #48]	; 0x30
 80057d2:	4649      	mov	r1, r9
 80057d4:	414b      	adcs	r3, r1
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057e4:	4659      	mov	r1, fp
 80057e6:	00cb      	lsls	r3, r1, #3
 80057e8:	4651      	mov	r1, sl
 80057ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ee:	4651      	mov	r1, sl
 80057f0:	00ca      	lsls	r2, r1, #3
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	4642      	mov	r2, r8
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005800:	464b      	mov	r3, r9
 8005802:	460a      	mov	r2, r1
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800581c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005820:	460b      	mov	r3, r1
 8005822:	18db      	adds	r3, r3, r3
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28
 8005826:	4613      	mov	r3, r2
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800582e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005836:	f7fb f939 	bl	8000aac <__aeabi_uldivmod>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <UART_SetConfig+0x2d4>)
 8005840:	fba3 1302 	umull	r1, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	2164      	movs	r1, #100	; 0x64
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	3332      	adds	r3, #50	; 0x32
 8005852:	4a08      	ldr	r2, [pc, #32]	; (8005874 <UART_SetConfig+0x2d4>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	f003 0207 	and.w	r2, r3, #7
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4422      	add	r2, r4
 8005866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005868:	e106      	b.n	8005a78 <UART_SetConfig+0x4d8>
 800586a:	bf00      	nop
 800586c:	40011000 	.word	0x40011000
 8005870:	40011400 	.word	0x40011400
 8005874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587c:	2200      	movs	r2, #0
 800587e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800588a:	4642      	mov	r2, r8
 800588c:	464b      	mov	r3, r9
 800588e:	1891      	adds	r1, r2, r2
 8005890:	6239      	str	r1, [r7, #32]
 8005892:	415b      	adcs	r3, r3
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800589a:	4641      	mov	r1, r8
 800589c:	1854      	adds	r4, r2, r1
 800589e:	4649      	mov	r1, r9
 80058a0:	eb43 0501 	adc.w	r5, r3, r1
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	00eb      	lsls	r3, r5, #3
 80058ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b2:	00e2      	lsls	r2, r4, #3
 80058b4:	4614      	mov	r4, r2
 80058b6:	461d      	mov	r5, r3
 80058b8:	4643      	mov	r3, r8
 80058ba:	18e3      	adds	r3, r4, r3
 80058bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058c0:	464b      	mov	r3, r9
 80058c2:	eb45 0303 	adc.w	r3, r5, r3
 80058c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058e6:	4629      	mov	r1, r5
 80058e8:	008b      	lsls	r3, r1, #2
 80058ea:	4621      	mov	r1, r4
 80058ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f0:	4621      	mov	r1, r4
 80058f2:	008a      	lsls	r2, r1, #2
 80058f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058f8:	f7fb f8d8 	bl	8000aac <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4b60      	ldr	r3, [pc, #384]	; (8005a84 <UART_SetConfig+0x4e4>)
 8005902:	fba3 2302 	umull	r2, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	011c      	lsls	r4, r3, #4
 800590a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800590e:	2200      	movs	r2, #0
 8005910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800591c:	4642      	mov	r2, r8
 800591e:	464b      	mov	r3, r9
 8005920:	1891      	adds	r1, r2, r2
 8005922:	61b9      	str	r1, [r7, #24]
 8005924:	415b      	adcs	r3, r3
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800592c:	4641      	mov	r1, r8
 800592e:	1851      	adds	r1, r2, r1
 8005930:	6139      	str	r1, [r7, #16]
 8005932:	4649      	mov	r1, r9
 8005934:	414b      	adcs	r3, r1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005944:	4659      	mov	r1, fp
 8005946:	00cb      	lsls	r3, r1, #3
 8005948:	4651      	mov	r1, sl
 800594a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800594e:	4651      	mov	r1, sl
 8005950:	00ca      	lsls	r2, r1, #3
 8005952:	4610      	mov	r0, r2
 8005954:	4619      	mov	r1, r3
 8005956:	4603      	mov	r3, r0
 8005958:	4642      	mov	r2, r8
 800595a:	189b      	adds	r3, r3, r2
 800595c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005960:	464b      	mov	r3, r9
 8005962:	460a      	mov	r2, r1
 8005964:	eb42 0303 	adc.w	r3, r2, r3
 8005968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	67bb      	str	r3, [r7, #120]	; 0x78
 8005976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005984:	4649      	mov	r1, r9
 8005986:	008b      	lsls	r3, r1, #2
 8005988:	4641      	mov	r1, r8
 800598a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598e:	4641      	mov	r1, r8
 8005990:	008a      	lsls	r2, r1, #2
 8005992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005996:	f7fb f889 	bl	8000aac <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <UART_SetConfig+0x4e4>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3332      	adds	r3, #50	; 0x32
 80059b4:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <UART_SetConfig+0x4e4>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c0:	441c      	add	r4, r3
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	673b      	str	r3, [r7, #112]	; 0x70
 80059ca:	677a      	str	r2, [r7, #116]	; 0x74
 80059cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	1891      	adds	r1, r2, r2
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	415b      	adcs	r3, r3
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059e0:	4641      	mov	r1, r8
 80059e2:	1851      	adds	r1, r2, r1
 80059e4:	6039      	str	r1, [r7, #0]
 80059e6:	4649      	mov	r1, r9
 80059e8:	414b      	adcs	r3, r1
 80059ea:	607b      	str	r3, [r7, #4]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059f8:	4659      	mov	r1, fp
 80059fa:	00cb      	lsls	r3, r1, #3
 80059fc:	4651      	mov	r1, sl
 80059fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a02:	4651      	mov	r1, sl
 8005a04:	00ca      	lsls	r2, r1, #3
 8005a06:	4610      	mov	r0, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a12:	464b      	mov	r3, r9
 8005a14:	460a      	mov	r2, r1
 8005a16:	eb42 0303 	adc.w	r3, r2, r3
 8005a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	663b      	str	r3, [r7, #96]	; 0x60
 8005a26:	667a      	str	r2, [r7, #100]	; 0x64
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a34:	4649      	mov	r1, r9
 8005a36:	008b      	lsls	r3, r1, #2
 8005a38:	4641      	mov	r1, r8
 8005a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a3e:	4641      	mov	r1, r8
 8005a40:	008a      	lsls	r2, r1, #2
 8005a42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a46:	f7fb f831 	bl	8000aac <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <UART_SetConfig+0x4e4>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <UART_SetConfig+0x4e4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 020f 	and.w	r2, r3, #15
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4422      	add	r2, r4
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a84:	51eb851f 	.word	0x51eb851f

08005a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a88:	b084      	sub	sp, #16
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	f107 001c 	add.w	r0, r7, #28
 8005a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d123      	bne.n	8005aea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9dc 	bl	8005e9c <USB_CoreReset>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]
 8005ae8:	e01b      	b.n	8005b22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9d0 	bl	8005e9c <USB_CoreReset>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
 8005b14:	e005      	b.n	8005b22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b22:	7fbb      	ldrb	r3, [r7, #30]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10b      	bne.n	8005b40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f043 0206 	orr.w	r2, r3, #6
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b4c:	b004      	add	sp, #16
 8005b4e:	4770      	bx	lr

08005b50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f043 0201 	orr.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d115      	bne.n	8005be2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bc2:	200a      	movs	r0, #10
 8005bc4:	f7fc f83a 	bl	8001c3c <HAL_Delay>
      ms += 10U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	330a      	adds	r3, #10
 8005bcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f956 	bl	8005e80 <USB_GetMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d01e      	beq.n	8005c18 <USB_SetCurrentMode+0x84>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2bc7      	cmp	r3, #199	; 0xc7
 8005bde:	d9f0      	bls.n	8005bc2 <USB_SetCurrentMode+0x2e>
 8005be0:	e01a      	b.n	8005c18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f7fc f821 	bl	8001c3c <HAL_Delay>
      ms += 10U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	330a      	adds	r3, #10
 8005bfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f93d 	bl	8005e80 <USB_GetMode>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <USB_SetCurrentMode+0x84>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2bc7      	cmp	r3, #199	; 0xc7
 8005c10:	d9f0      	bls.n	8005bf4 <USB_SetCurrentMode+0x60>
 8005c12:	e001      	b.n	8005c18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e005      	b.n	8005c24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2bc8      	cmp	r3, #200	; 0xc8
 8005c1c:	d101      	bne.n	8005c22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c46:	d901      	bls.n	8005c4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e01b      	b.n	8005c84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	daf2      	bge.n	8005c3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	019b      	lsls	r3, r3, #6
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c70:	d901      	bls.n	8005c76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e006      	b.n	8005c84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d0f0      	beq.n	8005c64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ca8:	d901      	bls.n	8005cae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e018      	b.n	8005ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	daf2      	bge.n	8005c9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ccc:	d901      	bls.n	8005cd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e006      	b.n	8005ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d0f0      	beq.n	8005cc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	71fb      	strb	r3, [r7, #7]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d123      	bne.n	8005d5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d12:	88bb      	ldrh	r3, [r7, #4]
 8005d14:	3303      	adds	r3, #3
 8005d16:	089b      	lsrs	r3, r3, #2
 8005d18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e018      	b.n	8005d52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	031a      	lsls	r2, r3, #12
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	3301      	adds	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d3e2      	bcc.n	8005d20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3724      	adds	r7, #36	; 0x24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b08b      	sub	sp, #44	; 0x2c
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	e014      	b.n	8005dbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	3301      	adds	r3, #1
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	3301      	adds	r3, #1
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3301      	adds	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	3301      	adds	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3e6      	bcc.n	8005d94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dc6:	8bfb      	ldrh	r3, [r7, #30]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01e      	beq.n	8005e0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	701a      	strb	r2, [r3, #0]
      i++;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	3301      	adds	r3, #1
 8005df6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005dfe:	8bfb      	ldrh	r3, [r7, #30]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e04:	8bfb      	ldrh	r3, [r7, #30]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1ea      	bne.n	8005de0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	372c      	adds	r7, #44	; 0x2c
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e30:	68fb      	ldr	r3, [r7, #12]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e72:	68bb      	ldr	r3, [r7, #8]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005eb4:	d901      	bls.n	8005eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e01b      	b.n	8005ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	daf2      	bge.n	8005ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ede:	d901      	bls.n	8005ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e006      	b.n	8005ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d0f0      	beq.n	8005ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f00:	b084      	sub	sp, #16
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f20:	461a      	mov	r2, r3
 8005f22:	2300      	movs	r3, #0
 8005f24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d119      	bne.n	8005f8a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10a      	bne.n	8005f74 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f6c:	f043 0304 	orr.w	r3, r3, #4
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e014      	b.n	8005f9e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f82:	f023 0304 	bic.w	r3, r3, #4
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e009      	b.n	8005f9e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f98:	f023 0304 	bic.w	r3, r3, #4
 8005f9c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f9e:	2110      	movs	r1, #16
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fe43 	bl	8005c2c <USB_FlushTxFifo>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fe6d 	bl	8005c90 <USB_FlushRxFifo>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	e015      	b.n	8005ff2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d3e3      	bcc.n	8005fc6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800600a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a18      	ldr	r2, [pc, #96]	; (8006070 <USB_HostInit+0x170>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d10b      	bne.n	800602c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a15      	ldr	r2, [pc, #84]	; (8006074 <USB_HostInit+0x174>)
 8006020:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a14      	ldr	r2, [pc, #80]	; (8006078 <USB_HostInit+0x178>)
 8006026:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800602a:	e009      	b.n	8006040 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2280      	movs	r2, #128	; 0x80
 8006030:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a11      	ldr	r2, [pc, #68]	; (800607c <USB_HostInit+0x17c>)
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a11      	ldr	r2, [pc, #68]	; (8006080 <USB_HostInit+0x180>)
 800603c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f043 0210 	orr.w	r2, r3, #16
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <USB_HostInit+0x184>)
 800605a:	4313      	orrs	r3, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800606c:	b004      	add	sp, #16
 800606e:	4770      	bx	lr
 8006070:	40040000 	.word	0x40040000
 8006074:	01000200 	.word	0x01000200
 8006078:	00e00300 	.word	0x00e00300
 800607c:	00600080 	.word	0x00600080
 8006080:	004000e0 	.word	0x004000e0
 8006084:	a3200008 	.word	0xa3200008

08006088 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d107      	bne.n	80060da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d0:	461a      	mov	r2, r3
 80060d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060d6:	6053      	str	r3, [r2, #4]
 80060d8:	e00c      	b.n	80060f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d107      	bne.n	80060f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e6:	461a      	mov	r2, r3
 80060e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80060ec:	6053      	str	r3, [r2, #4]
 80060ee:	e001      	b.n	80060f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006122:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006132:	2064      	movs	r0, #100	; 0x64
 8006134:	f7fb fd82 	bl	8001c3c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006144:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006146:	200a      	movs	r0, #10
 8006148:	f7fb fd78 	bl	8001c3c <HAL_Delay>

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800617a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <USB_DriveVbus+0x44>
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d106      	bne.n	800619a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006198:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a4:	d109      	bne.n	80061ba <USB_DriveVbus+0x64>
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061b8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	0c5b      	lsrs	r3, r3, #17
 80061e6:	f003 0303 	and.w	r3, r3, #3
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	b29b      	uxth	r3, r3
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4603      	mov	r3, r0
 8006228:	70fb      	strb	r3, [r7, #3]
 800622a:	460b      	mov	r3, r1
 800622c:	70bb      	strb	r3, [r7, #2]
 800622e:	4613      	mov	r3, r2
 8006230:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006246:	461a      	mov	r2, r3
 8006248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800624e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006252:	2b03      	cmp	r3, #3
 8006254:	d87c      	bhi.n	8006350 <USB_HC_Init+0x138>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <USB_HC_Init+0x44>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	0800626d 	.word	0x0800626d
 8006260:	08006313 	.word	0x08006313
 8006264:	0800626d 	.word	0x0800626d
 8006268:	080062d5 	.word	0x080062d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4413      	add	r3, r2
 8006274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006278:	461a      	mov	r2, r3
 800627a:	f240 439d 	movw	r3, #1181	; 0x49d
 800627e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006280:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006284:	2b00      	cmp	r3, #0
 8006286:	da10      	bge.n	80062aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	440a      	add	r2, r1
 800629e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80062a8:	e055      	b.n	8006356 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a6f      	ldr	r2, [pc, #444]	; (800646c <USB_HC_Init+0x254>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d151      	bne.n	8006356 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	78fa      	ldrb	r2, [r7, #3]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062d0:	60d3      	str	r3, [r2, #12]
      break;
 80062d2:	e040      	b.n	8006356 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	461a      	mov	r2, r3
 80062e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80062e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da34      	bge.n	800635a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	440a      	add	r2, r1
 8006306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006310:	e023      	b.n	800635a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	f240 2325 	movw	r3, #549	; 0x225
 8006324:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800632a:	2b00      	cmp	r3, #0
 800632c:	da17      	bge.n	800635e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006348:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800634c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800634e:	e006      	b.n	800635e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	77fb      	strb	r3, [r7, #31]
      break;
 8006354:	e004      	b.n	8006360 <USB_HC_Init+0x148>
      break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <USB_HC_Init+0x148>
      break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <USB_HC_Init+0x148>
      break;
 800635e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	461a      	mov	r2, r3
 800636e:	2300      	movs	r3, #0
 8006370:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	440a      	add	r2, r1
 8006388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638c:	f043 0302 	orr.w	r3, r3, #2
 8006390:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	2101      	movs	r1, #1
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	6939      	ldr	r1, [r7, #16]
 80063a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063ac:	4313      	orrs	r3, r2
 80063ae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da03      	bge.n	80063cc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e001      	b.n	80063d0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fef9 	bl	80061c8 <USB_GetHostSpeed>
 80063d6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80063d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d106      	bne.n	80063ee <USB_HC_Init+0x1d6>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d003      	beq.n	80063ee <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e001      	b.n	80063f2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063f2:	787b      	ldrb	r3, [r7, #1]
 80063f4:	059b      	lsls	r3, r3, #22
 80063f6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063fa:	78bb      	ldrb	r3, [r7, #2]
 80063fc:	02db      	lsls	r3, r3, #11
 80063fe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006402:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006408:	049b      	lsls	r3, r3, #18
 800640a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800640e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006410:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006412:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006416:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	431a      	orrs	r2, r3
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800642c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006430:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006432:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006436:	2b03      	cmp	r3, #3
 8006438:	d003      	beq.n	8006442 <USB_HC_Init+0x22a>
 800643a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800643e:	2b01      	cmp	r3, #1
 8006440:	d10f      	bne.n	8006462 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006460:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006462:	7ffb      	ldrb	r3, [r7, #31]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40040000 	.word	0x40040000

08006470 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	; 0x30
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800648c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a5d      	ldr	r2, [pc, #372]	; (8006608 <USB_HC_StartXfer+0x198>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d12f      	bne.n	80064f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d11c      	bne.n	80064d6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	7c9b      	ldrb	r3, [r3, #18]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <USB_HC_StartXfer+0x3c>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	7c9b      	ldrb	r3, [r3, #18]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d124      	bne.n	80064f6 <USB_HC_StartXfer+0x86>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	799b      	ldrb	r3, [r3, #6]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d120      	bne.n	80064f6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	60d3      	str	r3, [r2, #12]
 80064d4:	e00f      	b.n	80064f6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	791b      	ldrb	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <USB_HC_StartXfer+0x86>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	795b      	ldrb	r3, [r3, #5]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d107      	bne.n	80064f6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	4619      	mov	r1, r3
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fb6b 	bl	8006bc8 <USB_DoPing>
        return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e232      	b.n	800695c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	799b      	ldrb	r3, [r3, #6]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d158      	bne.n	80065b0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80064fe:	2301      	movs	r3, #1
 8006500:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800650a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	8a92      	ldrh	r2, [r2, #20]
 8006510:	fb03 f202 	mul.w	r2, r3, r2
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	61da      	str	r2, [r3, #28]
 8006518:	e07c      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	7c9b      	ldrb	r3, [r3, #18]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d130      	bne.n	8006584 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	2bbc      	cmp	r3, #188	; 0xbc
 8006528:	d918      	bls.n	800655c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	8a9b      	ldrh	r3, [r3, #20]
 800652e:	461a      	mov	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d003      	beq.n	800654c <USB_HC_StartXfer+0xdc>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d103      	bne.n	8006554 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2202      	movs	r2, #2
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e05f      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2201      	movs	r2, #1
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	e05b      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d007      	beq.n	800657c <USB_HC_StartXfer+0x10c>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d003      	beq.n	800657c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2204      	movs	r2, #4
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	e04b      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2203      	movs	r2, #3
 8006580:	60da      	str	r2, [r3, #12]
 8006582:	e047      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d10d      	bne.n	80065a6 <USB_HC_StartXfer+0x136>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	8a92      	ldrh	r2, [r2, #20]
 8006592:	4293      	cmp	r3, r2
 8006594:	d907      	bls.n	80065a6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	8a92      	ldrh	r2, [r2, #20]
 800659c:	fb03 f202 	mul.w	r2, r3, r2
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	61da      	str	r2, [r3, #28]
 80065a4:	e036      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	61da      	str	r2, [r3, #28]
 80065ae:	e031      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d018      	beq.n	80065ea <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	8a92      	ldrh	r2, [r2, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	3b01      	subs	r3, #1
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	8a92      	ldrh	r2, [r2, #20]
 80065c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065cc:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80065ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065d0:	8b7b      	ldrh	r3, [r7, #26]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d90b      	bls.n	80065ee <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80065d6:	8b7b      	ldrh	r3, [r7, #26]
 80065d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	8a92      	ldrh	r2, [r2, #20]
 80065e0:	fb03 f202 	mul.w	r2, r3, r2
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	61da      	str	r2, [r3, #28]
 80065e8:	e001      	b.n	80065ee <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80065ea:	2301      	movs	r3, #1
 80065ec:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	78db      	ldrb	r3, [r3, #3]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	8a92      	ldrh	r2, [r2, #20]
 80065fc:	fb03 f202 	mul.w	r2, r3, r2
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61da      	str	r2, [r3, #28]
 8006604:	e006      	b.n	8006614 <USB_HC_StartXfer+0x1a4>
 8006606:	bf00      	nop
 8006608:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800661c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800661e:	04d9      	lsls	r1, r3, #19
 8006620:	4ba3      	ldr	r3, [pc, #652]	; (80068b0 <USB_HC_StartXfer+0x440>)
 8006622:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006624:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	7d9b      	ldrb	r3, [r3, #22]
 800662a:	075b      	lsls	r3, r3, #29
 800662c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	0148      	lsls	r0, r1, #5
 8006634:	6a39      	ldr	r1, [r7, #32]
 8006636:	4401      	add	r1, r0
 8006638:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800663c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800663e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6999      	ldr	r1, [r3, #24]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	460a      	mov	r2, r1
 8006658:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	440a      	add	r2, r1
 8006688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006690:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	7e7b      	ldrb	r3, [r7, #25]
 80066a2:	075b      	lsls	r3, r3, #29
 80066a4:	69f9      	ldr	r1, [r7, #28]
 80066a6:	0148      	lsls	r0, r1, #5
 80066a8:	6a39      	ldr	r1, [r7, #32]
 80066aa:	4401      	add	r1, r0
 80066ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	799b      	ldrb	r3, [r3, #6]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	f040 80c3 	bne.w	8006844 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	7c5b      	ldrb	r3, [r3, #17]
 80066c2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80066c8:	4313      	orrs	r3, r2
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80066d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80066da:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	6a3a      	ldr	r2, [r7, #32]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	79db      	ldrb	r3, [r3, #7]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d123      	bne.n	800674c <USB_HC_StartXfer+0x2dc>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	78db      	ldrb	r3, [r3, #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11f      	bne.n	800674c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	6a3a      	ldr	r2, [r7, #32]
 8006720:	440a      	add	r2, r1
 8006722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800672a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	7c9b      	ldrb	r3, [r3, #18]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d003      	beq.n	800675c <USB_HC_StartXfer+0x2ec>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	7c9b      	ldrb	r3, [r3, #18]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d117      	bne.n	800678c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006760:	2b01      	cmp	r3, #1
 8006762:	d113      	bne.n	800678c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	78db      	ldrb	r3, [r3, #3]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10f      	bne.n	800678c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	6a3a      	ldr	r2, [r7, #32]
 8006780:	440a      	add	r2, r1
 8006782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	7c9b      	ldrb	r3, [r3, #18]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d162      	bne.n	800685a <USB_HC_StartXfer+0x3ea>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	78db      	ldrb	r3, [r3, #3]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d15e      	bne.n	800685a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d858      	bhi.n	8006858 <USB_HC_StartXfer+0x3e8>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USB_HC_StartXfer+0x33c>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067df 	.word	0x080067df
 80067b4:	08006801 	.word	0x08006801
 80067b8:	08006823 	.word	0x08006823
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	6a3a      	ldr	r2, [r7, #32]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067da:	6053      	str	r3, [r2, #4]
          break;
 80067dc:	e03d      	b.n	800685a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	6a3a      	ldr	r2, [r7, #32]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f8:	f043 030e 	orr.w	r3, r3, #14
 80067fc:	6053      	str	r3, [r2, #4]
          break;
 80067fe:	e02c      	b.n	800685a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	440a      	add	r2, r1
 8006816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800681e:	6053      	str	r3, [r2, #4]
          break;
 8006820:	e01b      	b.n	800685a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	440a      	add	r2, r1
 8006838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800683c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006840:	6053      	str	r3, [r2, #4]
          break;
 8006842:	e00a      	b.n	800685a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006850:	461a      	mov	r2, r3
 8006852:	2300      	movs	r3, #0
 8006854:	6053      	str	r3, [r2, #4]
 8006856:	e000      	b.n	800685a <USB_HC_StartXfer+0x3ea>
          break;
 8006858:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	4413      	add	r3, r2
 8006862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006870:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	78db      	ldrb	r3, [r3, #3]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	e003      	b.n	800688c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800688a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006892:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a0:	461a      	mov	r2, r3
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e055      	b.n	800695c <USB_HC_StartXfer+0x4ec>
 80068b0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	78db      	ldrb	r3, [r3, #3]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d14e      	bne.n	800695a <USB_HC_StartXfer+0x4ea>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d04a      	beq.n	800695a <USB_HC_StartXfer+0x4ea>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	79db      	ldrb	r3, [r3, #7]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d146      	bne.n	800695a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	7c9b      	ldrb	r3, [r3, #18]
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d831      	bhi.n	8006938 <USB_HC_StartXfer+0x4c8>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <USB_HC_StartXfer+0x46c>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	08006911 	.word	0x08006911
 80068e4:	080068ed 	.word	0x080068ed
 80068e8:	08006911 	.word	0x08006911
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	3303      	adds	r3, #3
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068f6:	8afa      	ldrh	r2, [r7, #22]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	429a      	cmp	r2, r3
 8006900:	d91c      	bls.n	800693c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	619a      	str	r2, [r3, #24]
        }
        break;
 800690e:	e015      	b.n	800693c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	3303      	adds	r3, #3
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800691a:	8afa      	ldrh	r2, [r7, #22]
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	b29b      	uxth	r3, r3
 8006926:	429a      	cmp	r2, r3
 8006928:	d90a      	bls.n	8006940 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	619a      	str	r2, [r3, #24]
        }
        break;
 8006936:	e003      	b.n	8006940 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <USB_HC_StartXfer+0x4d2>
        break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <USB_HC_StartXfer+0x4d2>
        break;
 8006940:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6999      	ldr	r1, [r3, #24]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	785a      	ldrb	r2, [r3, #1]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	b29b      	uxth	r3, r3
 8006950:	2000      	movs	r0, #0
 8006952:	9000      	str	r0, [sp, #0]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff f9c9 	bl	8005cec <USB_WritePacket>
  }

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	; 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	b29b      	uxth	r3, r3
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006986:	b480      	push	{r7}
 8006988:	b089      	sub	sp, #36	; 0x24
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	0c9b      	lsrs	r3, r3, #18
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	0fdb      	lsrs	r3, r3, #31
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	0fdb      	lsrs	r3, r3, #31
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d10d      	bne.n	8006a08 <USB_HC_Halt+0x82>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <USB_HC_Halt+0x82>
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d002      	beq.n	8006a04 <USB_HC_Halt+0x7e>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d101      	bne.n	8006a08 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e0d8      	b.n	8006bba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <USB_HC_Halt+0x8e>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d173      	bne.n	8006afc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d14a      	bne.n	8006ad6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d133      	bne.n	8006ab4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a8a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a98:	d82e      	bhi.n	8006af8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab0:	d0ec      	beq.n	8006a8c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ab2:	e081      	b.n	8006bb8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ad4:	e070      	b.n	8006bb8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006af6:	e05f      	b.n	8006bb8 <USB_HC_Halt+0x232>
            break;
 8006af8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006afa:	e05d      	b.n	8006bb8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d133      	bne.n	8006b94 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b78:	d81d      	bhi.n	8006bb6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d0ec      	beq.n	8006b6c <USB_HC_Halt+0x1e6>
 8006b92:	e011      	b.n	8006bb8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	e000      	b.n	8006bb8 <USB_HC_Halt+0x232>
          break;
 8006bb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3724      	adds	r7, #36	; 0x24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	04da      	lsls	r2, r3, #19
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <USB_DoPing+0x74>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bf8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	461a      	mov	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	1ff80000 	.word	0x1ff80000

08006c40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fe ff8c 	bl	8005b72 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c5a:	2110      	movs	r1, #16
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fe ffe5 	bl	8005c2c <USB_FlushTxFifo>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f80f 	bl	8005c90 <USB_FlushRxFifo>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	e01f      	b.n	8006cc2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ca8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b0f      	cmp	r3, #15
 8006cc6:	d9dc      	bls.n	8006c82 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e034      	b.n	8006d38 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ce4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	461a      	mov	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d14:	d80c      	bhi.n	8006d30 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2c:	d0ec      	beq.n	8006d08 <USB_StopHost+0xc8>
 8006d2e:	e000      	b.n	8006d32 <USB_StopHost+0xf2>
        break;
 8006d30:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d9c7      	bls.n	8006cce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d44:	461a      	mov	r2, r3
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d4a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d52:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fe fefb 	bl	8005b50 <USB_EnableGlobalInt>

  return ret;
 8006d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b089      	sub	sp, #36	; 0x24
 8006d68:	af04      	add	r7, sp, #16
 8006d6a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	2202      	movs	r2, #2
 8006d70:	2102      	movs	r1, #2
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc85 	bl	8007682 <USBH_FindInterface>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2bff      	cmp	r3, #255	; 0xff
 8006d80:	d002      	beq.n	8006d88 <USBH_CDC_InterfaceInit+0x24>
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d901      	bls.n	8006d8c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e13d      	b.n	8007008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc5a 	bl	800764a <USBH_SelectInterface>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006da0:	2302      	movs	r3, #2
 8006da2:	e131      	b.n	8007008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006daa:	2050      	movs	r0, #80	; 0x50
 8006dac:	f002 fb74 	bl	8009498 <malloc>
 8006db0:	4603      	mov	r3, r0
 8006db2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e11f      	b.n	8007008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006dc8:	2250      	movs	r2, #80	; 0x50
 8006dca:	2100      	movs	r1, #0
 8006dcc:	68b8      	ldr	r0, [r7, #8]
 8006dce:	f002 fc3f 	bl	8009650 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	211a      	movs	r1, #26
 8006dd8:	fb01 f303 	mul.w	r3, r1, r3
 8006ddc:	4413      	add	r3, r2
 8006dde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	b25b      	sxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da15      	bge.n	8006e16 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	211a      	movs	r1, #26
 8006df0:	fb01 f303 	mul.w	r3, r1, r3
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	211a      	movs	r1, #26
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e10:	881a      	ldrh	r2, [r3, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 ffce 	bl	8008dbe <USBH_AllocPipe>
 8006e22:	4603      	mov	r3, r0
 8006e24:	461a      	mov	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	7858      	ldrb	r0, [r3, #1]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	8952      	ldrh	r2, [r2, #10]
 8006e42:	9202      	str	r2, [sp, #8]
 8006e44:	2203      	movs	r2, #3
 8006e46:	9201      	str	r2, [sp, #4]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 ff86 	bl	8008d60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f002 fa95 	bl	800938c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e62:	2300      	movs	r3, #0
 8006e64:	2200      	movs	r2, #0
 8006e66:	210a      	movs	r1, #10
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fc0a 	bl	8007682 <USBH_FindInterface>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2bff      	cmp	r3, #255	; 0xff
 8006e76:	d002      	beq.n	8006e7e <USBH_CDC_InterfaceInit+0x11a>
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d901      	bls.n	8006e82 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e0c2      	b.n	8007008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	211a      	movs	r1, #26
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da16      	bge.n	8006ec8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	211a      	movs	r1, #26
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	211a      	movs	r1, #26
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	835a      	strh	r2, [r3, #26]
 8006ec6:	e015      	b.n	8006ef4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	211a      	movs	r1, #26
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	211a      	movs	r1, #26
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eee:	881a      	ldrh	r2, [r3, #0]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	211a      	movs	r1, #26
 8006efa:	fb01 f303 	mul.w	r3, r1, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da16      	bge.n	8006f3a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	211a      	movs	r1, #26
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f1c:	781a      	ldrb	r2, [r3, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	211a      	movs	r1, #26
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f32:	881a      	ldrh	r2, [r3, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	835a      	strh	r2, [r3, #26]
 8006f38:	e015      	b.n	8006f66 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	211a      	movs	r1, #26
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	211a      	movs	r1, #26
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	7b9b      	ldrb	r3, [r3, #14]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 ff26 	bl	8008dbe <USBH_AllocPipe>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	7bdb      	ldrb	r3, [r3, #15]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 ff1c 	bl	8008dbe <USBH_AllocPipe>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	7b59      	ldrb	r1, [r3, #13]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7b98      	ldrb	r0, [r3, #14]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	8b12      	ldrh	r2, [r2, #24]
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	9201      	str	r2, [sp, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4623      	mov	r3, r4
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fed4 	bl	8008d60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	7b19      	ldrb	r1, [r3, #12]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	7bd8      	ldrb	r0, [r3, #15]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	8b52      	ldrh	r2, [r2, #26]
 8006fd0:	9202      	str	r2, [sp, #8]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	9201      	str	r2, [sp, #4]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	4623      	mov	r3, r4
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 febf 	bl	8008d60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	7b5b      	ldrb	r3, [r3, #13]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f002 f9ca 	bl	800938c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	7b1b      	ldrb	r3, [r3, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f002 f9c3 	bl	800938c <USBH_LL_SetToggle>

  return USBH_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	bd90      	pop	{r4, r7, pc}

08007010 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00e      	beq.n	8007048 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 feb4 	bl	8008d9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fedf 	bl	8008e00 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	7b1b      	ldrb	r3, [r3, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00e      	beq.n	800706e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	7b1b      	ldrb	r3, [r3, #12]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fea1 	bl	8008d9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	7b1b      	ldrb	r3, [r3, #12]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fecc 	bl	8008e00 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	7b5b      	ldrb	r3, [r3, #13]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00e      	beq.n	8007094 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	7b5b      	ldrb	r3, [r3, #13]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fe8e 	bl	8008d9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	7b5b      	ldrb	r3, [r3, #13]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 feb9 	bl	8008e00 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f002 f9fd 	bl	80094a8 <free>
    phost->pActiveClass->pData = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b4:	2200      	movs	r2, #0
 80070b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3340      	adds	r3, #64	; 0x40
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8b1 	bl	8007242 <GetLineCoding>
 80070e0:	4603      	mov	r3, r0
 80070e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070f0:	2102      	movs	r1, #2
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070f6:	7afb      	ldrb	r3, [r7, #11]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007120:	2b04      	cmp	r3, #4
 8007122:	d877      	bhi.n	8007214 <USBH_CDC_Process+0x114>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBH_CDC_Process+0x2c>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	08007141 	.word	0x08007141
 8007130:	08007147 	.word	0x08007147
 8007134:	08007177 	.word	0x08007177
 8007138:	080071eb 	.word	0x080071eb
 800713c:	080071f9 	.word	0x080071f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	e06d      	b.n	8007222 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f897 	bl	8007280 <SetLineCoding>
 8007152:	4603      	mov	r3, r0
 8007154:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007164:	e058      	b.n	8007218 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d055      	beq.n	8007218 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2204      	movs	r2, #4
 8007170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007174:	e050      	b.n	8007218 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	3340      	adds	r3, #64	; 0x40
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f860 	bl	8007242 <GetLineCoding>
 8007182:	4603      	mov	r3, r0
 8007184:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d126      	bne.n	80071da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d13b      	bne.n	800721c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d133      	bne.n	800721c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d12b      	bne.n	800721c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d124      	bne.n	800721c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f958 	bl	8007488 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071d8:	e020      	b.n	800721c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d01d      	beq.n	800721c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2204      	movs	r2, #4
 80071e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071e8:	e018      	b.n	800721c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f867 	bl	80072be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8da 	bl	80073aa <CDC_ProcessReception>
      break;
 80071f6:	e014      	b.n	8007222 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 f822 	bl	8008244 <USBH_ClrFeature>
 8007200:	4603      	mov	r3, r0
 8007202:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007212:	e005      	b.n	8007220 <USBH_CDC_Process+0x120>

    default:
      break;
 8007214:	bf00      	nop
 8007216:	e004      	b.n	8007222 <USBH_CDC_Process+0x122>
      break;
 8007218:	bf00      	nop
 800721a:	e002      	b.n	8007222 <USBH_CDC_Process+0x122>
      break;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <USBH_CDC_Process+0x122>
      break;
 8007220:	bf00      	nop

  }

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	22a1      	movs	r2, #161	; 0xa1
 8007250:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2221      	movs	r2, #33	; 0x21
 8007256:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2207      	movs	r2, #7
 8007268:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2207      	movs	r2, #7
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fb23 	bl	80088bc <USBH_CtlReq>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2221      	movs	r2, #33	; 0x21
 800728e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2207      	movs	r2, #7
 80072a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2207      	movs	r2, #7
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fb04 	bl	80088bc <USBH_CtlReq>
 80072b4:	4603      	mov	r3, r0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af02      	add	r7, sp, #8
 80072c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072d0:	2300      	movs	r3, #0
 80072d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d002      	beq.n	80072e4 <CDC_ProcessTransmission+0x26>
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d023      	beq.n	800732a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072e2:	e05e      	b.n	80073a2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	8b12      	ldrh	r2, [r2, #24]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d90b      	bls.n	8007308 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	69d9      	ldr	r1, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8b1a      	ldrh	r2, [r3, #24]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	7b5b      	ldrb	r3, [r3, #13]
 80072fc:	2001      	movs	r0, #1
 80072fe:	9000      	str	r0, [sp, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fcea 	bl	8008cda <USBH_BulkSendData>
 8007306:	e00b      	b.n	8007320 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	7b5b      	ldrb	r3, [r3, #13]
 8007316:	2001      	movs	r0, #1
 8007318:	9000      	str	r0, [sp, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fcdd 	bl	8008cda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007328:	e03b      	b.n	80073a2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	7b5b      	ldrb	r3, [r3, #13]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f002 f801 	bl	8009338 <USBH_LL_GetURBState>
 8007336:	4603      	mov	r3, r0
 8007338:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d128      	bne.n	8007392 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	8b12      	ldrh	r2, [r2, #24]
 8007348:	4293      	cmp	r3, r2
 800734a:	d90e      	bls.n	800736a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	8b12      	ldrh	r2, [r2, #24]
 8007354:	1a9a      	subs	r2, r3, r2
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	8b12      	ldrh	r2, [r2, #24]
 8007362:	441a      	add	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	61da      	str	r2, [r3, #28]
 8007368:	e002      	b.n	8007370 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007380:	e00e      	b.n	80073a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f868 	bl	8007460 <USBH_CDC_TransmitCallback>
      break;
 8007390:	e006      	b.n	80073a0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d103      	bne.n	80073a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073a0:	bf00      	nop
  }
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073bc:	2300      	movs	r3, #0
 80073be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d002      	beq.n	80073d0 <CDC_ProcessReception+0x26>
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d00e      	beq.n	80073ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80073ce:	e043      	b.n	8007458 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	6a19      	ldr	r1, [r3, #32]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	8b5a      	ldrh	r2, [r3, #26]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	7b1b      	ldrb	r3, [r3, #12]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fca1 	bl	8008d24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2204      	movs	r2, #4
 80073e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073ea:	e035      	b.n	8007458 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	7b1b      	ldrb	r3, [r3, #12]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 ffa0 	bl	8009338 <USBH_LL_GetURBState>
 80073f8:	4603      	mov	r3, r0
 80073fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073fc:	7cfb      	ldrb	r3, [r7, #19]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d129      	bne.n	8007456 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	7b1b      	ldrb	r3, [r3, #12]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 ff03 	bl	8009214 <USBH_LL_GetLastXferSize>
 800740e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	429a      	cmp	r2, r3
 8007418:	d016      	beq.n	8007448 <CDC_ProcessReception+0x9e>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	8b5b      	ldrh	r3, [r3, #26]
 800741e:	461a      	mov	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4293      	cmp	r3, r2
 8007424:	d910      	bls.n	8007448 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	441a      	add	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2203      	movs	r2, #3
 8007442:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007446:	e006      	b.n	8007456 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f80f 	bl	8007474 <USBH_CDC_ReceiveCallback>
      break;
 8007456:	bf00      	nop
  }
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e029      	b.n	8007508 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f81f 	bl	8007510 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f001 fdd3 	bl	80090ac <USBH_LL_Init>

  return USBH_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e009      	b.n	8007536 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	33e0      	adds	r3, #224	; 0xe0
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	2200      	movs	r2, #0
 800752e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b0f      	cmp	r3, #15
 800753a:	d9f2      	bls.n	8007522 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e009      	b.n	8007556 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755c:	d3f1      	bcc.n	8007542 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2240      	movs	r2, #64	; 0x40
 8007582:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	331c      	adds	r3, #28
 80075ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f002 f84b 	bl	8009650 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f002 f842 	bl	8009650 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f203 3326 	addw	r3, r3, #806	; 0x326
 80075d2:	2212      	movs	r2, #18
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f002 f83a 	bl	8009650 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075e2:	223e      	movs	r2, #62	; 0x3e
 80075e4:	2100      	movs	r1, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f002 f832 	bl	8009650 <memset>

  return USBH_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10e      	bne.n	8007632 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800761a:	1c59      	adds	r1, r3, #1
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	33de      	adds	r3, #222	; 0xde
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	e004      	b.n	800763c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007632:	2302      	movs	r3, #2
 8007634:	73fb      	strb	r3, [r7, #15]
 8007636:	e001      	b.n	800763c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007638:	2302      	movs	r3, #2
 800763a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	429a      	cmp	r2, r3
 8007664:	d204      	bcs.n	8007670 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800766e:	e001      	b.n	8007674 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007670:	2302      	movs	r3, #2
 8007672:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	4608      	mov	r0, r1
 800768c:	4611      	mov	r1, r2
 800768e:	461a      	mov	r2, r3
 8007690:	4603      	mov	r3, r0
 8007692:	70fb      	strb	r3, [r7, #3]
 8007694:	460b      	mov	r3, r1
 8007696:	70bb      	strb	r3, [r7, #2]
 8007698:	4613      	mov	r3, r2
 800769a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076aa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076ac:	e025      	b.n	80076fa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	221a      	movs	r2, #26
 80076b2:	fb02 f303 	mul.w	r3, r2, r3
 80076b6:	3308      	adds	r3, #8
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	3302      	adds	r3, #2
 80076be:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	795b      	ldrb	r3, [r3, #5]
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d002      	beq.n	80076d0 <USBH_FindInterface+0x4e>
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	2bff      	cmp	r3, #255	; 0xff
 80076ce:	d111      	bne.n	80076f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076d4:	78ba      	ldrb	r2, [r7, #2]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d002      	beq.n	80076e0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076da:	78bb      	ldrb	r3, [r7, #2]
 80076dc:	2bff      	cmp	r3, #255	; 0xff
 80076de:	d109      	bne.n	80076f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076e4:	787a      	ldrb	r2, [r7, #1]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d002      	beq.n	80076f0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076ea:	787b      	ldrb	r3, [r7, #1]
 80076ec:	2bff      	cmp	r3, #255	; 0xff
 80076ee:	d101      	bne.n	80076f4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	e006      	b.n	8007702 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	3301      	adds	r3, #1
 80076f8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d9d6      	bls.n	80076ae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007700:	23ff      	movs	r3, #255	; 0xff
}
 8007702:	4618      	mov	r0, r3
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fd04 	bl	8009124 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800771c:	2101      	movs	r1, #1
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fe1d 	bl	800935e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af04      	add	r7, sp, #16
 8007736:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007738:	2302      	movs	r3, #2
 800773a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d102      	bne.n	8007752 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2203      	movs	r2, #3
 8007750:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b0b      	cmp	r3, #11
 800775a:	f200 81be 	bhi.w	8007ada <USBH_Process+0x3aa>
 800775e:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBH_Process+0x34>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007795 	.word	0x08007795
 8007768:	080077c7 	.word	0x080077c7
 800776c:	0800782f 	.word	0x0800782f
 8007770:	08007a75 	.word	0x08007a75
 8007774:	08007adb 	.word	0x08007adb
 8007778:	080078d3 	.word	0x080078d3
 800777c:	08007a1b 	.word	0x08007a1b
 8007780:	08007909 	.word	0x08007909
 8007784:	08007929 	.word	0x08007929
 8007788:	08007949 	.word	0x08007949
 800778c:	0800798d 	.word	0x0800798d
 8007790:	08007a5d 	.word	0x08007a5d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 819e 	beq.w	8007ade <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80077a8:	20c8      	movs	r0, #200	; 0xc8
 80077aa:	f001 fe22 	bl	80093f2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 fd15 	bl	80091de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077c4:	e18b      	b.n	8007ade <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d107      	bne.n	80077e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077de:	e18d      	b.n	8007afc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077ea:	d914      	bls.n	8007816 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077f2:	3301      	adds	r3, #1
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007802:	2b03      	cmp	r3, #3
 8007804:	d903      	bls.n	800780e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220d      	movs	r2, #13
 800780a:	701a      	strb	r2, [r3, #0]
      break;
 800780c:	e176      	b.n	8007afc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
      break;
 8007814:	e172      	b.n	8007afc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800781c:	f103 020a 	add.w	r2, r3, #10
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007826:	200a      	movs	r0, #10
 8007828:	f001 fde3 	bl	80093f2 <USBH_Delay>
      break;
 800782c:	e166      	b.n	8007afc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800783e:	2104      	movs	r1, #4
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007844:	2064      	movs	r0, #100	; 0x64
 8007846:	f001 fdd4 	bl	80093f2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fca0 	bl	8009190 <USBH_LL_GetSpeed>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2205      	movs	r2, #5
 800785e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 faab 	bl	8008dbe <USBH_AllocPipe>
 8007868:	4603      	mov	r3, r0
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007870:	2180      	movs	r1, #128	; 0x80
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 faa3 	bl	8008dbe <USBH_AllocPipe>
 8007878:	4603      	mov	r3, r0
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7919      	ldrb	r1, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007894:	b292      	uxth	r2, r2
 8007896:	9202      	str	r2, [sp, #8]
 8007898:	2200      	movs	r2, #0
 800789a:	9201      	str	r2, [sp, #4]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4603      	mov	r3, r0
 80078a0:	2280      	movs	r2, #128	; 0x80
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fa5c 	bl	8008d60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7959      	ldrb	r1, [r3, #5]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078bc:	b292      	uxth	r2, r2
 80078be:	9202      	str	r2, [sp, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	9201      	str	r2, [sp, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4603      	mov	r3, r0
 80078c8:	2200      	movs	r2, #0
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fa48 	bl	8008d60 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078d0:	e114      	b.n	8007afc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f918 	bl	8007b08 <USBH_HandleEnum>
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 80fe 	bne.w	8007ae2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d103      	bne.n	8007900 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2208      	movs	r2, #8
 80078fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078fe:	e0f0      	b.n	8007ae2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2207      	movs	r2, #7
 8007904:	701a      	strb	r2, [r3, #0]
      break;
 8007906:	e0ec      	b.n	8007ae2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80e9 	beq.w	8007ae6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800791a:	2101      	movs	r1, #1
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2208      	movs	r2, #8
 8007924:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007926:	e0de      	b.n	8007ae6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800792e:	b29b      	uxth	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc3f 	bl	80081b6 <USBH_SetCfg>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 80d5 	bne.w	8007aea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2209      	movs	r2, #9
 8007944:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007946:	e0d0      	b.n	8007aea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007956:	2101      	movs	r1, #1
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc4f 	bl	80081fc <USBH_SetFeature>
 800795e:	4603      	mov	r3, r0
 8007960:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	220a      	movs	r2, #10
 800796e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007970:	e0bd      	b.n	8007aee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b03      	cmp	r3, #3
 8007978:	f040 80b9 	bne.w	8007aee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220a      	movs	r2, #10
 8007980:	701a      	strb	r2, [r3, #0]
      break;
 8007982:	e0b4      	b.n	8007aee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	220a      	movs	r2, #10
 8007988:	701a      	strb	r2, [r3, #0]
      break;
 800798a:	e0b0      	b.n	8007aee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80ad 	beq.w	8007af2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
 80079a4:	e016      	b.n	80079d4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80079a6:	7bfa      	ldrb	r2, [r7, #15]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32de      	adds	r2, #222	; 0xde
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	791a      	ldrb	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d108      	bne.n	80079ce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80079bc:	7bfa      	ldrb	r2, [r7, #15]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	32de      	adds	r2, #222	; 0xde
 80079c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80079cc:	e005      	b.n	80079da <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	3301      	adds	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0e5      	beq.n	80079a6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d016      	beq.n	8007a12 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2206      	movs	r2, #6
 80079fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a02:	2103      	movs	r1, #3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a08:	e073      	b.n	8007af2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	220d      	movs	r2, #13
 8007a0e:	701a      	strb	r2, [r3, #0]
      break;
 8007a10:	e06f      	b.n	8007af2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	220d      	movs	r2, #13
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	e06b      	b.n	8007af2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d017      	beq.n	8007a54 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	220b      	movs	r2, #11
 8007a40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a42:	e058      	b.n	8007af6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d154      	bne.n	8007af6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220d      	movs	r2, #13
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	e050      	b.n	8007af6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	220d      	movs	r2, #13
 8007a58:	701a      	strb	r2, [r3, #0]
      break;
 8007a5a:	e04c      	b.n	8007af6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d049      	beq.n	8007afa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
      }
      break;
 8007a72:	e042      	b.n	8007afa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fd47 	bl	8007510 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d009      	beq.n	8007aa0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ab0:	2105      	movs	r1, #5
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d107      	bne.n	8007ad2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fe1f 	bl	800770e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ad0:	e014      	b.n	8007afc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fb26 	bl	8009124 <USBH_LL_Start>
      break;
 8007ad8:	e010      	b.n	8007afc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ada:	bf00      	nop
 8007adc:	e00e      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007ade:	bf00      	nop
 8007ae0:	e00c      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e00a      	b.n	8007afc <USBH_Process+0x3cc>
    break;
 8007ae6:	bf00      	nop
 8007ae8:	e008      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007aea:	bf00      	nop
 8007aec:	e006      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007aee:	bf00      	nop
 8007af0:	e004      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007af2:	bf00      	nop
 8007af4:	e002      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007af6:	bf00      	nop
 8007af8:	e000      	b.n	8007afc <USBH_Process+0x3cc>
      break;
 8007afa:	bf00      	nop
  }
  return USBH_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af04      	add	r7, sp, #16
 8007b0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b10:	2301      	movs	r3, #1
 8007b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b07      	cmp	r3, #7
 8007b1e:	f200 81c1 	bhi.w	8007ea4 <USBH_HandleEnum+0x39c>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <USBH_HandleEnum+0x20>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b49 	.word	0x08007b49
 8007b2c:	08007c07 	.word	0x08007c07
 8007b30:	08007c71 	.word	0x08007c71
 8007b34:	08007cff 	.word	0x08007cff
 8007b38:	08007d69 	.word	0x08007d69
 8007b3c:	08007dd9 	.word	0x08007dd9
 8007b40:	08007e1f 	.word	0x08007e1f
 8007b44:	08007e65 	.word	0x08007e65
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b48:	2108      	movs	r1, #8
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa50 	bl	8007ff0 <USBH_Get_DevDesc>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d130      	bne.n	8007bbc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7919      	ldrb	r1, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	9202      	str	r2, [sp, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2280      	movs	r2, #128	; 0x80
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f8e7 	bl	8008d60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7959      	ldrb	r1, [r3, #5]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ba6:	b292      	uxth	r2, r2
 8007ba8:	9202      	str	r2, [sp, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	9201      	str	r2, [sp, #4]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f8d3 	bl	8008d60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bba:	e175      	b.n	8007ea8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	f040 8172 	bne.w	8007ea8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bca:	3301      	adds	r3, #1
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d903      	bls.n	8007be6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	220d      	movs	r2, #13
 8007be2:	701a      	strb	r2, [r3, #0]
      break;
 8007be4:	e160      	b.n	8007ea8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	795b      	ldrb	r3, [r3, #5]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 f907 	bl	8008e00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	791b      	ldrb	r3, [r3, #4]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 f901 	bl	8008e00 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]
      break;
 8007c04:	e150      	b.n	8007ea8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c06:	2112      	movs	r1, #18
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f9f1 	bl	8007ff0 <USBH_Get_DevDesc>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c1e:	e145      	b.n	8007eac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	f040 8142 	bne.w	8007eac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c2e:	3301      	adds	r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d903      	bls.n	8007c4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	220d      	movs	r2, #13
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	e130      	b.n	8007eac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	795b      	ldrb	r3, [r3, #5]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 f8d5 	bl	8008e00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	791b      	ldrb	r3, [r3, #4]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 f8cf 	bl	8008e00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
      break;
 8007c6e:	e11d      	b.n	8007eac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c70:	2101      	movs	r1, #1
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa7b 	bl	800816e <USBH_SetAddress>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d132      	bne.n	8007ce8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c82:	2002      	movs	r0, #2
 8007c84:	f001 fbb5 	bl	80093f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2203      	movs	r2, #3
 8007c94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7919      	ldrb	r1, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007caa:	b292      	uxth	r2, r2
 8007cac:	9202      	str	r2, [sp, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	9201      	str	r2, [sp, #4]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2280      	movs	r2, #128	; 0x80
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f851 	bl	8008d60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7959      	ldrb	r1, [r3, #5]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cd2:	b292      	uxth	r2, r2
 8007cd4:	9202      	str	r2, [sp, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	9201      	str	r2, [sp, #4]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 f83d 	bl	8008d60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ce6:	e0e3      	b.n	8007eb0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	f040 80e0 	bne.w	8007eb0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	220d      	movs	r2, #13
 8007cf4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	705a      	strb	r2, [r3, #1]
      break;
 8007cfc:	e0d8      	b.n	8007eb0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007cfe:	2109      	movs	r1, #9
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9a1 	bl	8008048 <USBH_Get_CfgDesc>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2204      	movs	r2, #4
 8007d14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d16:	e0cd      	b.n	8007eb4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	f040 80ca 	bne.w	8007eb4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d26:	3301      	adds	r3, #1
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d903      	bls.n	8007d42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	220d      	movs	r2, #13
 8007d3e:	701a      	strb	r2, [r3, #0]
      break;
 8007d40:	e0b8      	b.n	8007eb4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	795b      	ldrb	r3, [r3, #5]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 f859 	bl	8008e00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f853 	bl	8008e00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
      break;
 8007d66:	e0a5      	b.n	8007eb4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f969 	bl	8008048 <USBH_Get_CfgDesc>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2205      	movs	r2, #5
 8007d84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d86:	e097      	b.n	8007eb8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	f040 8094 	bne.w	8007eb8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d96:	3301      	adds	r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d903      	bls.n	8007db2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	220d      	movs	r2, #13
 8007dae:	701a      	strb	r2, [r3, #0]
      break;
 8007db0:	e082      	b.n	8007eb8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	795b      	ldrb	r3, [r3, #5]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f821 	bl	8008e00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	791b      	ldrb	r3, [r3, #4]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f81b 	bl	8008e00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
      break;
 8007dd6:	e06f      	b.n	8007eb8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d019      	beq.n	8007e16 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007dee:	23ff      	movs	r3, #255	; 0xff
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f953 	bl	800809c <USBH_Get_StringDesc>
 8007df6:	4603      	mov	r3, r0
 8007df8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d103      	bne.n	8007e08 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2206      	movs	r2, #6
 8007e04:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e06:	e059      	b.n	8007ebc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d156      	bne.n	8007ebc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2206      	movs	r2, #6
 8007e12:	705a      	strb	r2, [r3, #1]
      break;
 8007e14:	e052      	b.n	8007ebc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2206      	movs	r2, #6
 8007e1a:	705a      	strb	r2, [r3, #1]
      break;
 8007e1c:	e04e      	b.n	8007ebc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d019      	beq.n	8007e5c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e34:	23ff      	movs	r3, #255	; 0xff
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f930 	bl	800809c <USBH_Get_StringDesc>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2207      	movs	r2, #7
 8007e4a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e4c:	e038      	b.n	8007ec0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d135      	bne.n	8007ec0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2207      	movs	r2, #7
 8007e58:	705a      	strb	r2, [r3, #1]
      break;
 8007e5a:	e031      	b.n	8007ec0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2207      	movs	r2, #7
 8007e60:	705a      	strb	r2, [r3, #1]
      break;
 8007e62:	e02d      	b.n	8007ec0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d017      	beq.n	8007e9e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e7a:	23ff      	movs	r3, #255	; 0xff
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f90d 	bl	800809c <USBH_Get_StringDesc>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e90:	e018      	b.n	8007ec4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d115      	bne.n	8007ec4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9c:	e012      	b.n	8007ec4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea2:	e00f      	b.n	8007ec4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e00e      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e00c      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007eac:	bf00      	nop
 8007eae:	e00a      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e008      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e006      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007eb8:	bf00      	nop
 8007eba:	e004      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007ebc:	bf00      	nop
 8007ebe:	e002      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007ec0:	bf00      	nop
 8007ec2:	e000      	b.n	8007ec6 <USBH_HandleEnum+0x3be>
      break;
 8007ec4:	bf00      	nop
  }
  return Status;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f804 	bl	8007f12 <USBH_HandleSof>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b0b      	cmp	r3, #11
 8007f22:	d10a      	bne.n	8007f3a <USBH_HandleSof+0x28>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f52:	bf00      	nop
}
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f6e:	bf00      	nop
}
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f8c6 	bl	800915a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	791b      	ldrb	r3, [r3, #4]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 ff13 	bl	8008e00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	795b      	ldrb	r3, [r3, #5]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 ff0d 	bl	8008e00 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008002:	d901      	bls.n	8008008 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008004:	2303      	movs	r3, #3
 8008006:	e01b      	b.n	8008040 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800800e:	887b      	ldrh	r3, [r7, #2]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f872 	bl	8008104 <USBH_GetDescriptor>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f929 	bl	800828c <USBH_ParseDevDesc>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af02      	add	r7, sp, #8
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	331c      	adds	r3, #28
 8008058:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800805a:	887b      	ldrh	r3, [r7, #2]
 800805c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008060:	d901      	bls.n	8008066 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008062:	2303      	movs	r3, #3
 8008064:	e016      	b.n	8008094 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008066:	887b      	ldrh	r3, [r7, #2]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008070:	2100      	movs	r1, #0
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f846 	bl	8008104 <USBH_GetDescriptor>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d107      	bne.n	8008092 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008082:	887b      	ldrh	r3, [r7, #2]
 8008084:	461a      	mov	r2, r3
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9b3 	bl	80083f4 <USBH_ParseCfgDesc>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	461a      	mov	r2, r3
 80080a8:	460b      	mov	r3, r1
 80080aa:	72fb      	strb	r3, [r7, #11]
 80080ac:	4613      	mov	r3, r2
 80080ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80080b0:	893b      	ldrh	r3, [r7, #8]
 80080b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b6:	d802      	bhi.n	80080be <USBH_Get_StringDesc+0x22>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080be:	2303      	movs	r3, #3
 80080c0:	e01c      	b.n	80080fc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80080ca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80080d2:	893b      	ldrh	r3, [r7, #8]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	460b      	mov	r3, r1
 80080d8:	2100      	movs	r1, #0
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f812 	bl	8008104 <USBH_GetDescriptor>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080f0:	893a      	ldrh	r2, [r7, #8]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fb93 	bl	8008820 <USBH_ParseStringDesc>
  }

  return status;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	72fb      	strb	r3, [r7, #11]
 8008112:	4613      	mov	r3, r2
 8008114:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	789b      	ldrb	r3, [r3, #2]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d11c      	bne.n	8008158 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008124:	b2da      	uxtb	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2206      	movs	r2, #6
 800812e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	893a      	ldrh	r2, [r7, #8]
 8008134:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008136:	893b      	ldrh	r3, [r7, #8]
 8008138:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800813c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008140:	d104      	bne.n	800814c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f240 4209 	movw	r2, #1033	; 0x409
 8008148:	829a      	strh	r2, [r3, #20]
 800814a:	e002      	b.n	8008152 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8b3a      	ldrh	r2, [r7, #24]
 8008156:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008158:	8b3b      	ldrh	r3, [r7, #24]
 800815a:	461a      	mov	r2, r3
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fbac 	bl	80088bc <USBH_CtlReq>
 8008164:	4603      	mov	r3, r0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	789b      	ldrb	r3, [r3, #2]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d10f      	bne.n	80081a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2205      	movs	r2, #5
 800818c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb88 	bl	80088bc <USBH_CtlReq>
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	460b      	mov	r3, r1
 80081c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	789b      	ldrb	r3, [r3, #2]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d10e      	bne.n	80081e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2209      	movs	r2, #9
 80081d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	887a      	ldrh	r2, [r7, #2]
 80081da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb65 	bl	80088bc <USBH_CtlReq>
 80081f2:	4603      	mov	r3, r0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10f      	bne.n	8008230 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2203      	movs	r2, #3
 800821a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb41 	bl	80088bc <USBH_CtlReq>
 800823a:	4603      	mov	r3, r0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	789b      	ldrb	r3, [r3, #2]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d10f      	bne.n	8008278 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fb1d 	bl	80088bc <USBH_CtlReq>
 8008282:	4603      	mov	r3, r0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f203 3326 	addw	r3, r3, #806	; 0x326
 80082a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80082ac:	2302      	movs	r3, #2
 80082ae:	e098      	b.n	80083e2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	785a      	ldrb	r2, [r3, #1]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3302      	adds	r3, #2
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3303      	adds	r3, #3
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	791a      	ldrb	r2, [r3, #4]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	795a      	ldrb	r2, [r3, #5]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	799a      	ldrb	r2, [r3, #6]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	79da      	ldrb	r2, [r3, #7]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800830c:	2b01      	cmp	r3, #1
 800830e:	d11b      	bne.n	8008348 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	79db      	ldrb	r3, [r3, #7]
 8008314:	2b20      	cmp	r3, #32
 8008316:	dc0f      	bgt.n	8008338 <USBH_ParseDevDesc+0xac>
 8008318:	2b08      	cmp	r3, #8
 800831a:	db0f      	blt.n	800833c <USBH_ParseDevDesc+0xb0>
 800831c:	3b08      	subs	r3, #8
 800831e:	4a34      	ldr	r2, [pc, #208]	; (80083f0 <USBH_ParseDevDesc+0x164>)
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf14      	ite	ne
 800832c:	2301      	movne	r3, #1
 800832e:	2300      	moveq	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <USBH_ParseDevDesc+0xb8>
 8008336:	e001      	b.n	800833c <USBH_ParseDevDesc+0xb0>
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d003      	beq.n	8008344 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2208      	movs	r2, #8
 8008340:	71da      	strb	r2, [r3, #7]
        break;
 8008342:	e000      	b.n	8008346 <USBH_ParseDevDesc+0xba>
        break;
 8008344:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008346:	e00e      	b.n	8008366 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800834e:	2b02      	cmp	r3, #2
 8008350:	d107      	bne.n	8008362 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	79db      	ldrb	r3, [r3, #7]
 8008356:	2b08      	cmp	r3, #8
 8008358:	d005      	beq.n	8008366 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2208      	movs	r2, #8
 800835e:	71da      	strb	r2, [r3, #7]
 8008360:	e001      	b.n	8008366 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008362:	2303      	movs	r3, #3
 8008364:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	2b08      	cmp	r3, #8
 800836a:	d939      	bls.n	80083e0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	3308      	adds	r3, #8
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	b29a      	uxth	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	3309      	adds	r3, #9
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	b29b      	uxth	r3, r3
 8008380:	4313      	orrs	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	330a      	adds	r3, #10
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b29a      	uxth	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	330b      	adds	r3, #11
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	b29b      	uxth	r3, r3
 800839c:	4313      	orrs	r3, r2
 800839e:	b29a      	uxth	r2, r3
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	330c      	adds	r3, #12
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	330d      	adds	r3, #13
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4313      	orrs	r3, r2
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	7b9a      	ldrb	r2, [r3, #14]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	7bda      	ldrb	r2, [r3, #15]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	7c1a      	ldrb	r2, [r3, #16]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	7c5a      	ldrb	r2, [r3, #17]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	01000101 	.word	0x01000101

080083f4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008408:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008422:	2302      	movs	r3, #2
 8008424:	e0db      	b.n	80085de <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	781a      	ldrb	r2, [r3, #0]
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	785a      	ldrb	r2, [r3, #1]
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	3302      	adds	r3, #2
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b29a      	uxth	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3303      	adds	r3, #3
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	b29b      	uxth	r3, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	b29b      	uxth	r3, r3
 8008452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008456:	bf28      	it	cs
 8008458:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800845c:	b29a      	uxth	r2, r3
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	791a      	ldrb	r2, [r3, #4]
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	795a      	ldrb	r2, [r3, #5]
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	799a      	ldrb	r2, [r3, #6]
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	79da      	ldrb	r2, [r3, #7]
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	7a1a      	ldrb	r2, [r3, #8]
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b09      	cmp	r3, #9
 8008490:	d002      	beq.n	8008498 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	2209      	movs	r2, #9
 8008496:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	2b09      	cmp	r3, #9
 800849c:	f240 809d 	bls.w	80085da <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 80084a0:	2309      	movs	r3, #9
 80084a2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084a8:	e081      	b.n	80085ae <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084aa:	f107 0316 	add.w	r3, r7, #22
 80084ae:	4619      	mov	r1, r3
 80084b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b2:	f000 f9e8 	bl	8008886 <USBH_GetNextDesc>
 80084b6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d176      	bne.n	80085ae <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b09      	cmp	r3, #9
 80084c6:	d002      	beq.n	80084ce <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	2209      	movs	r2, #9
 80084cc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80084ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d2:	221a      	movs	r2, #26
 80084d4:	fb02 f303 	mul.w	r3, r2, r3
 80084d8:	3308      	adds	r3, #8
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	4413      	add	r3, r2
 80084de:	3302      	adds	r3, #2
 80084e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e4:	69f8      	ldr	r0, [r7, #28]
 80084e6:	f000 f87e 	bl	80085e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084f4:	e043      	b.n	800857e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084f6:	f107 0316 	add.w	r3, r7, #22
 80084fa:	4619      	mov	r1, r3
 80084fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fe:	f000 f9c2 	bl	8008886 <USBH_GetNextDesc>
 8008502:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	2b05      	cmp	r3, #5
 800850a:	d138      	bne.n	800857e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	795b      	ldrb	r3, [r3, #5]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d113      	bne.n	800853c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008518:	2b02      	cmp	r3, #2
 800851a:	d003      	beq.n	8008524 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	799b      	ldrb	r3, [r3, #6]
 8008520:	2b03      	cmp	r3, #3
 8008522:	d10b      	bne.n	800853c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	79db      	ldrb	r3, [r3, #7]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <USBH_ParseCfgDesc+0x150>
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b09      	cmp	r3, #9
 8008532:	d007      	beq.n	8008544 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	2209      	movs	r2, #9
 8008538:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800853a:	e003      	b.n	8008544 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2207      	movs	r2, #7
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	e000      	b.n	8008546 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008544:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800854a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800854e:	3201      	adds	r2, #1
 8008550:	00d2      	lsls	r2, r2, #3
 8008552:	211a      	movs	r1, #26
 8008554:	fb01 f303 	mul.w	r3, r1, r3
 8008558:	4413      	add	r3, r2
 800855a:	3308      	adds	r3, #8
 800855c:	6a3a      	ldr	r2, [r7, #32]
 800855e:	4413      	add	r3, r2
 8008560:	3304      	adds	r3, #4
 8008562:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f870 	bl	800864e <USBH_ParseEPDesc>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008578:	3301      	adds	r3, #1
 800857a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	791b      	ldrb	r3, [r3, #4]
 8008582:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008586:	429a      	cmp	r2, r3
 8008588:	d204      	bcs.n	8008594 <USBH_ParseCfgDesc+0x1a0>
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	885a      	ldrh	r2, [r3, #2]
 800858e:	8afb      	ldrh	r3, [r7, #22]
 8008590:	429a      	cmp	r2, r3
 8008592:	d8b0      	bhi.n	80084f6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	791b      	ldrb	r3, [r3, #4]
 8008598:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800859c:	429a      	cmp	r2, r3
 800859e:	d201      	bcs.n	80085a4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e01c      	b.n	80085de <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 80085a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a8:	3301      	adds	r3, #1
 80085aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d805      	bhi.n	80085c2 <USBH_ParseCfgDesc+0x1ce>
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	885a      	ldrh	r2, [r3, #2]
 80085ba:	8afb      	ldrh	r3, [r7, #22]
 80085bc:	429a      	cmp	r2, r3
 80085be:	f63f af74 	bhi.w	80084aa <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	791b      	ldrb	r3, [r3, #4]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	bf28      	it	cs
 80085ca:	2302      	movcs	r3, #2
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d201      	bcs.n	80085da <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e001      	b.n	80085de <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 80085da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3730      	adds	r7, #48	; 0x30
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781a      	ldrb	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	785a      	ldrb	r2, [r3, #1]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	789a      	ldrb	r2, [r3, #2]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	78da      	ldrb	r2, [r3, #3]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	3304      	adds	r3, #4
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b02      	cmp	r3, #2
 8008618:	bf28      	it	cs
 800861a:	2302      	movcs	r3, #2
 800861c:	b2da      	uxtb	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	795a      	ldrb	r2, [r3, #5]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	799a      	ldrb	r2, [r3, #6]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	79da      	ldrb	r2, [r3, #7]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	7a1a      	ldrb	r2, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	721a      	strb	r2, [r3, #8]
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800864e:	b480      	push	{r7}
 8008650:	b087      	sub	sp, #28
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	781a      	ldrb	r2, [r3, #0]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	785a      	ldrb	r2, [r3, #1]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	789a      	ldrb	r2, [r3, #2]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	78da      	ldrb	r2, [r3, #3]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3305      	adds	r3, #5
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	4313      	orrs	r3, r2
 8008694:	b29a      	uxth	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	799a      	ldrb	r2, [r3, #6]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	889b      	ldrh	r3, [r3, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80086ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b2:	d804      	bhi.n	80086be <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80086b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086bc:	d901      	bls.n	80086c2 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80086be:	2303      	movs	r3, #3
 80086c0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d136      	bne.n	800873a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	78db      	ldrb	r3, [r3, #3]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d108      	bne.n	80086ea <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	889b      	ldrh	r3, [r3, #4]
 80086dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e0:	f240 8097 	bls.w	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	75fb      	strb	r3, [r7, #23]
 80086e8:	e093      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	78db      	ldrb	r3, [r3, #3]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	889b      	ldrh	r3, [r3, #4]
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	f240 8089 	bls.w	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008700:	2303      	movs	r3, #3
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	e085      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b01      	cmp	r3, #1
 8008710:	d005      	beq.n	800871e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800871a:	2b03      	cmp	r3, #3
 800871c:	d10a      	bne.n	8008734 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	799b      	ldrb	r3, [r3, #6]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <USBH_ParseEPDesc+0xe0>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	799b      	ldrb	r3, [r3, #6]
 800872a:	2b10      	cmp	r3, #16
 800872c:	d970      	bls.n	8008810 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800872e:	2303      	movs	r3, #3
 8008730:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008732:	e06d      	b.n	8008810 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008734:	2303      	movs	r3, #3
 8008736:	75fb      	strb	r3, [r7, #23]
 8008738:	e06b      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008740:	2b01      	cmp	r3, #1
 8008742:	d13c      	bne.n	80087be <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	78db      	ldrb	r3, [r3, #3]
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d005      	beq.n	800875c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	78db      	ldrb	r3, [r3, #3]
 8008754:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	889b      	ldrh	r3, [r3, #4]
 8008760:	2b40      	cmp	r3, #64	; 0x40
 8008762:	d956      	bls.n	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008764:	2303      	movs	r3, #3
 8008766:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008768:	e053      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	78db      	ldrb	r3, [r3, #3]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10e      	bne.n	8008794 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	799b      	ldrb	r3, [r3, #6]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d007      	beq.n	800878e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008782:	2b10      	cmp	r3, #16
 8008784:	d803      	bhi.n	800878e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d941      	bls.n	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800878e:	2303      	movs	r3, #3
 8008790:	75fb      	strb	r3, [r7, #23]
 8008792:	e03e      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	2b03      	cmp	r3, #3
 800879e:	d10b      	bne.n	80087b8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	799b      	ldrb	r3, [r3, #6]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <USBH_ParseEPDesc+0x164>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	889b      	ldrh	r3, [r3, #4]
 80087ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b0:	d32f      	bcc.n	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087b2:	2303      	movs	r3, #3
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e02c      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087b8:	2303      	movs	r3, #3
 80087ba:	75fb      	strb	r3, [r7, #23]
 80087bc:	e029      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d120      	bne.n	800880a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	889b      	ldrh	r3, [r3, #4]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d01a      	beq.n	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087dc:	2303      	movs	r3, #3
 80087de:	75fb      	strb	r3, [r7, #23]
 80087e0:	e017      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	78db      	ldrb	r3, [r3, #3]
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d10a      	bne.n	8008804 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	799b      	ldrb	r3, [r3, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <USBH_ParseEPDesc+0x1b0>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	889b      	ldrh	r3, [r3, #4]
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d909      	bls.n	8008812 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087fe:	2303      	movs	r3, #3
 8008800:	75fb      	strb	r3, [r7, #23]
 8008802:	e006      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008804:	2303      	movs	r3, #3
 8008806:	75fb      	strb	r3, [r7, #23]
 8008808:	e003      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800880a:	2303      	movs	r3, #3
 800880c:	75fb      	strb	r3, [r7, #23]
 800880e:	e000      	b.n	8008812 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008810:	bf00      	nop
  }

  return status;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b03      	cmp	r3, #3
 8008836:	d120      	bne.n	800887a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	1e9a      	subs	r2, r3, #2
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	4293      	cmp	r3, r2
 8008842:	bf28      	it	cs
 8008844:	4613      	movcs	r3, r2
 8008846:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3302      	adds	r3, #2
 800884c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800884e:	2300      	movs	r3, #0
 8008850:	82fb      	strh	r3, [r7, #22]
 8008852:	e00b      	b.n	800886c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008854:	8afb      	ldrh	r3, [r7, #22]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3301      	adds	r3, #1
 8008864:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008866:	8afb      	ldrh	r3, [r7, #22]
 8008868:	3302      	adds	r3, #2
 800886a:	82fb      	strh	r3, [r7, #22]
 800886c:	8afa      	ldrh	r2, [r7, #22]
 800886e:	8abb      	ldrh	r3, [r7, #20]
 8008870:	429a      	cmp	r2, r3
 8008872:	d3ef      	bcc.n	8008854 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
  }
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	4413      	add	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4413      	add	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088ae:	68fb      	ldr	r3, [r7, #12]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80088ca:	2301      	movs	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	789b      	ldrb	r3, [r3, #2]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d002      	beq.n	80088dc <USBH_CtlReq+0x20>
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d00f      	beq.n	80088fa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80088da:	e027      	b.n	800892c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2202      	movs	r2, #2
 80088f2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088f4:	2301      	movs	r3, #1
 80088f6:	75fb      	strb	r3, [r7, #23]
      break;
 80088f8:	e018      	b.n	800892c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f81c 	bl	8008938 <USBH_HandleControl>
 8008900:	4603      	mov	r3, r0
 8008902:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <USBH_CtlReq+0x54>
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d106      	bne.n	800891e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	761a      	strb	r2, [r3, #24]
      break;
 800891c:	e005      	b.n	800892a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d102      	bne.n	800892a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	709a      	strb	r2, [r3, #2]
      break;
 800892a:	bf00      	nop
  }
  return status;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af02      	add	r7, sp, #8
 800893e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008944:	2300      	movs	r3, #0
 8008946:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7e1b      	ldrb	r3, [r3, #24]
 800894c:	3b01      	subs	r3, #1
 800894e:	2b0a      	cmp	r3, #10
 8008950:	f200 8156 	bhi.w	8008c00 <USBH_HandleControl+0x2c8>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <USBH_HandleControl+0x24>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008989 	.word	0x08008989
 8008960:	080089a3 	.word	0x080089a3
 8008964:	08008a0d 	.word	0x08008a0d
 8008968:	08008a33 	.word	0x08008a33
 800896c:	08008a6b 	.word	0x08008a6b
 8008970:	08008a95 	.word	0x08008a95
 8008974:	08008ae7 	.word	0x08008ae7
 8008978:	08008b09 	.word	0x08008b09
 800897c:	08008b45 	.word	0x08008b45
 8008980:	08008b6b 	.word	0x08008b6b
 8008984:	08008ba9 	.word	0x08008ba9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f103 0110 	add.w	r1, r3, #16
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	795b      	ldrb	r3, [r3, #5]
 8008992:	461a      	mov	r2, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f943 	bl	8008c20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2202      	movs	r2, #2
 800899e:	761a      	strb	r2, [r3, #24]
      break;
 80089a0:	e139      	b.n	8008c16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	795b      	ldrb	r3, [r3, #5]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fcc5 	bl	8009338 <USBH_LL_GetURBState>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d11e      	bne.n	80089f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	7c1b      	ldrb	r3, [r3, #16]
 80089bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8adb      	ldrh	r3, [r3, #22]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089ca:	7b7b      	ldrb	r3, [r7, #13]
 80089cc:	2b80      	cmp	r3, #128	; 0x80
 80089ce:	d103      	bne.n	80089d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2203      	movs	r2, #3
 80089d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089d6:	e115      	b.n	8008c04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2205      	movs	r2, #5
 80089dc:	761a      	strb	r2, [r3, #24]
      break;
 80089de:	e111      	b.n	8008c04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80089e0:	7b7b      	ldrb	r3, [r7, #13]
 80089e2:	2b80      	cmp	r3, #128	; 0x80
 80089e4:	d103      	bne.n	80089ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2209      	movs	r2, #9
 80089ea:	761a      	strb	r2, [r3, #24]
      break;
 80089ec:	e10a      	b.n	8008c04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2207      	movs	r2, #7
 80089f2:	761a      	strb	r2, [r3, #24]
      break;
 80089f4:	e106      	b.n	8008c04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d003      	beq.n	8008a04 <USBH_HandleControl+0xcc>
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	f040 8100 	bne.w	8008c04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	220b      	movs	r2, #11
 8008a08:	761a      	strb	r2, [r3, #24]
      break;
 8008a0a:	e0fb      	b.n	8008c04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6899      	ldr	r1, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	899a      	ldrh	r2, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	791b      	ldrb	r3, [r3, #4]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f93a 	bl	8008c9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	761a      	strb	r2, [r3, #24]
      break;
 8008a30:	e0f1      	b.n	8008c16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	791b      	ldrb	r3, [r3, #4]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fc7d 	bl	8009338 <USBH_LL_GetURBState>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d102      	bne.n	8008a4e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2209      	movs	r2, #9
 8008a4c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b05      	cmp	r3, #5
 8008a52:	d102      	bne.n	8008a5a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a54:	2303      	movs	r3, #3
 8008a56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a58:	e0d6      	b.n	8008c08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	f040 80d3 	bne.w	8008c08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	220b      	movs	r2, #11
 8008a66:	761a      	strb	r2, [r3, #24]
      break;
 8008a68:	e0ce      	b.n	8008c08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6899      	ldr	r1, [r3, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	899a      	ldrh	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	795b      	ldrb	r3, [r3, #5]
 8008a76:	2001      	movs	r0, #1
 8008a78:	9000      	str	r0, [sp, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f8ea 	bl	8008c54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2206      	movs	r2, #6
 8008a90:	761a      	strb	r2, [r3, #24]
      break;
 8008a92:	e0c0      	b.n	8008c16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	795b      	ldrb	r3, [r3, #5]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fc4c 	bl	8009338 <USBH_LL_GetURBState>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d103      	bne.n	8008ab2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2207      	movs	r2, #7
 8008aae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ab0:	e0ac      	b.n	8008c0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b05      	cmp	r3, #5
 8008ab6:	d105      	bne.n	8008ac4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	220c      	movs	r2, #12
 8008abc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	e0a3      	b.n	8008c0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d103      	bne.n	8008ad2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2205      	movs	r2, #5
 8008ace:	761a      	strb	r2, [r3, #24]
      break;
 8008ad0:	e09c      	b.n	8008c0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	f040 8099 	bne.w	8008c0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	220b      	movs	r2, #11
 8008ade:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae4:	e092      	b.n	8008c0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	791b      	ldrb	r3, [r3, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8d5 	bl	8008c9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2208      	movs	r2, #8
 8008b04:	761a      	strb	r2, [r3, #24]

      break;
 8008b06:	e086      	b.n	8008c16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	791b      	ldrb	r3, [r3, #4]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fc12 	bl	8009338 <USBH_LL_GetURBState>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d105      	bne.n	8008b2a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	220d      	movs	r2, #13
 8008b22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b28:	e072      	b.n	8008c10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d103      	bne.n	8008b38 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	220b      	movs	r2, #11
 8008b34:	761a      	strb	r2, [r3, #24]
      break;
 8008b36:	e06b      	b.n	8008c10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b05      	cmp	r3, #5
 8008b3c:	d168      	bne.n	8008c10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	73fb      	strb	r3, [r7, #15]
      break;
 8008b42:	e065      	b.n	8008c10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	795b      	ldrb	r3, [r3, #5]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	9200      	str	r2, [sp, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2100      	movs	r1, #0
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f87f 	bl	8008c54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	220a      	movs	r2, #10
 8008b66:	761a      	strb	r2, [r3, #24]
      break;
 8008b68:	e055      	b.n	8008c16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	795b      	ldrb	r3, [r3, #5]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fbe1 	bl	8009338 <USBH_LL_GetURBState>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d105      	bne.n	8008b8c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	220d      	movs	r2, #13
 8008b88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b8a:	e043      	b.n	8008c14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d103      	bne.n	8008b9a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2209      	movs	r2, #9
 8008b96:	761a      	strb	r2, [r3, #24]
      break;
 8008b98:	e03c      	b.n	8008c14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d139      	bne.n	8008c14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	220b      	movs	r2, #11
 8008ba4:	761a      	strb	r2, [r3, #24]
      break;
 8008ba6:	e035      	b.n	8008c14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7e5b      	ldrb	r3, [r3, #25]
 8008bac:	3301      	adds	r3, #1
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	765a      	strb	r2, [r3, #25]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	7e5b      	ldrb	r3, [r3, #25]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d806      	bhi.n	8008bca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008bc8:	e025      	b.n	8008c16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bd0:	2106      	movs	r1, #6
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	795b      	ldrb	r3, [r3, #5]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f90c 	bl	8008e00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	791b      	ldrb	r3, [r3, #4]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f906 	bl	8008e00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfe:	e00a      	b.n	8008c16 <USBH_HandleControl+0x2de>

    default:
      break;
 8008c00:	bf00      	nop
 8008c02:	e008      	b.n	8008c16 <USBH_HandleControl+0x2de>
      break;
 8008c04:	bf00      	nop
 8008c06:	e006      	b.n	8008c16 <USBH_HandleControl+0x2de>
      break;
 8008c08:	bf00      	nop
 8008c0a:	e004      	b.n	8008c16 <USBH_HandleControl+0x2de>
      break;
 8008c0c:	bf00      	nop
 8008c0e:	e002      	b.n	8008c16 <USBH_HandleControl+0x2de>
      break;
 8008c10:	bf00      	nop
 8008c12:	e000      	b.n	8008c16 <USBH_HandleControl+0x2de>
      break;
 8008c14:	bf00      	nop
  }

  return status;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af04      	add	r7, sp, #16
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c2e:	79f9      	ldrb	r1, [r7, #7]
 8008c30:	2300      	movs	r3, #0
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	2308      	movs	r3, #8
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	2200      	movs	r2, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 fb46 	bl	80092d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af04      	add	r7, sp, #16
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	460b      	mov	r3, r1
 8008c64:	80fb      	strh	r3, [r7, #6]
 8008c66:	4613      	mov	r3, r2
 8008c68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c78:	7979      	ldrb	r1, [r7, #5]
 8008c7a:	7e3b      	ldrb	r3, [r7, #24]
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	9302      	str	r3, [sp, #8]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	2301      	movs	r3, #1
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fb21 	bl	80092d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b088      	sub	sp, #32
 8008ca2:	af04      	add	r7, sp, #16
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	461a      	mov	r2, r3
 8008cac:	460b      	mov	r3, r1
 8008cae:	80fb      	strh	r3, [r7, #6]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cb4:	7979      	ldrb	r1, [r7, #5]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	9302      	str	r3, [sp, #8]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2201      	movs	r2, #1
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 fb03 	bl	80092d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cd0:	2300      	movs	r3, #0

}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b088      	sub	sp, #32
 8008cde:	af04      	add	r7, sp, #16
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	460b      	mov	r3, r1
 8008cea:	80fb      	strh	r3, [r7, #6]
 8008cec:	4613      	mov	r3, r2
 8008cee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cfe:	7979      	ldrb	r1, [r7, #5]
 8008d00:	7e3b      	ldrb	r3, [r7, #24]
 8008d02:	9303      	str	r3, [sp, #12]
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	9302      	str	r3, [sp, #8]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2302      	movs	r3, #2
 8008d12:	2200      	movs	r2, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fade 	bl	80092d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b088      	sub	sp, #32
 8008d28:	af04      	add	r7, sp, #16
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	461a      	mov	r2, r3
 8008d32:	460b      	mov	r3, r1
 8008d34:	80fb      	strh	r3, [r7, #6]
 8008d36:	4613      	mov	r3, r2
 8008d38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d3a:	7979      	ldrb	r1, [r7, #5]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9303      	str	r3, [sp, #12]
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	9302      	str	r3, [sp, #8]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	2201      	movs	r2, #1
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 fac0 	bl	80092d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af04      	add	r7, sp, #16
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	4608      	mov	r0, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4603      	mov	r3, r0
 8008d70:	70fb      	strb	r3, [r7, #3]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70bb      	strb	r3, [r7, #2]
 8008d76:	4613      	mov	r3, r2
 8008d78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d7a:	7878      	ldrb	r0, [r7, #1]
 8008d7c:	78ba      	ldrb	r2, [r7, #2]
 8008d7e:	78f9      	ldrb	r1, [r7, #3]
 8008d80:	8b3b      	ldrh	r3, [r7, #24]
 8008d82:	9302      	str	r3, [sp, #8]
 8008d84:	7d3b      	ldrb	r3, [r7, #20]
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	7c3b      	ldrb	r3, [r7, #16]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa53 	bl	800923a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa72 	bl	8009298 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f836 	bl	8008e3c <USBH_GetFreePipe>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008dd4:	89fb      	ldrh	r3, [r7, #14]
 8008dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00a      	beq.n	8008df4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	33e0      	adds	r3, #224	; 0xe0
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	b2db      	uxtb	r3, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	2b0f      	cmp	r3, #15
 8008e10:	d80d      	bhi.n	8008e2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	33e0      	adds	r3, #224	; 0xe0
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	33e0      	adds	r3, #224	; 0xe0
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
 8008e4c:	e00f      	b.n	8008e6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	33e0      	adds	r3, #224	; 0xe0
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	e007      	b.n	8008e78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b0f      	cmp	r3, #15
 8008e72:	d9ec      	bls.n	8008e4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	490e      	ldr	r1, [pc, #56]	; (8008ec4 <MX_USB_HOST_Init+0x40>)
 8008e8c:	480e      	ldr	r0, [pc, #56]	; (8008ec8 <MX_USB_HOST_Init+0x44>)
 8008e8e:	f7fe fb05 	bl	800749c <USBH_Init>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e98:	f7f8 fba6 	bl	80015e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e9c:	490b      	ldr	r1, [pc, #44]	; (8008ecc <MX_USB_HOST_Init+0x48>)
 8008e9e:	480a      	ldr	r0, [pc, #40]	; (8008ec8 <MX_USB_HOST_Init+0x44>)
 8008ea0:	f7fe fba9 	bl	80075f6 <USBH_RegisterClass>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008eaa:	f7f8 fb9d 	bl	80015e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008eae:	4806      	ldr	r0, [pc, #24]	; (8008ec8 <MX_USB_HOST_Init+0x44>)
 8008eb0:	f7fe fc2d 	bl	800770e <USBH_Start>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008eba:	f7f8 fb95 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ebe:	bf00      	nop
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08008ee5 	.word	0x08008ee5
 8008ec8:	200001a0 	.word	0x200001a0
 8008ecc:	2000000c 	.word	0x2000000c

08008ed0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ed4:	4802      	ldr	r0, [pc, #8]	; (8008ee0 <MX_USB_HOST_Process+0x10>)
 8008ed6:	f7fe fc2b 	bl	8007730 <USBH_Process>
}
 8008eda:	bf00      	nop
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200001a0 	.word	0x200001a0

08008ee4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d819      	bhi.n	8008f2c <USBH_UserProcess+0x48>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBH_UserProcess+0x1c>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f2d 	.word	0x08008f2d
 8008f04:	08008f1d 	.word	0x08008f1d
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f25 	.word	0x08008f25
 8008f10:	08008f15 	.word	0x08008f15
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008f14:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <USBH_UserProcess+0x58>)
 8008f16:	2203      	movs	r2, #3
 8008f18:	701a      	strb	r2, [r3, #0]
  break;
 8008f1a:	e008      	b.n	8008f2e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008f1c:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <USBH_UserProcess+0x58>)
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]
  break;
 8008f22:	e004      	b.n	8008f2e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <USBH_UserProcess+0x58>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	701a      	strb	r2, [r3, #0]
  break;
 8008f2a:	e000      	b.n	8008f2e <USBH_UserProcess+0x4a>

  default:
  break;
 8008f2c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000578 	.word	0x20000578

08008f40 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	609a      	str	r2, [r3, #8]
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f60:	d147      	bne.n	8008ff2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f62:	2300      	movs	r3, #0
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	4b25      	ldr	r3, [pc, #148]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6a:	4a24      	ldr	r2, [pc, #144]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008f6c:	f043 0301 	orr.w	r3, r3, #1
 8008f70:	6313      	str	r3, [r2, #48]	; 0x30
 8008f72:	4b22      	ldr	r3, [pc, #136]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	4619      	mov	r1, r3
 8008f92:	481b      	ldr	r0, [pc, #108]	; (8009000 <HAL_HCD_MspInit+0xc0>)
 8008f94:	f7f8 ff88 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008faa:	230a      	movs	r3, #10
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fae:	f107 0314 	add.w	r3, r7, #20
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4812      	ldr	r0, [pc, #72]	; (8009000 <HAL_HCD_MspInit+0xc0>)
 8008fb6:	f7f8 ff77 	bl	8001ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	4a0f      	ldr	r2, [pc, #60]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	4a0b      	ldr	r2, [pc, #44]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fd6:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <HAL_HCD_MspInit+0xbc>)
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	2043      	movs	r0, #67	; 0x43
 8008fe8:	f7f8 ff27 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fec:	2043      	movs	r0, #67	; 0x43
 8008fee:	f7f8 ff40 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ff2:	bf00      	nop
 8008ff4:	3728      	adds	r7, #40	; 0x28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40023800 	.word	0x40023800
 8009000:	40020000 	.word	0x40020000

08009004 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe ff6b 	bl	8007eee <USBH_LL_IncTimer>
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe ffa3 	bl	8007f7a <USBH_LL_Connect>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe ffac 	bl	8007fa8 <USBH_LL_Disconnect>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
 8009064:	4613      	mov	r3, r2
 8009066:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe ff5d 	bl	8007f42 <USBH_LL_PortEnabled>
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe ff5d 	bl	8007f5e <USBH_LL_PortDisabled>
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d12a      	bne.n	8009114 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80090be:	4a18      	ldr	r2, [pc, #96]	; (8009120 <USBH_LL_Init+0x74>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a15      	ldr	r2, [pc, #84]	; (8009120 <USBH_LL_Init+0x74>)
 80090ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090ce:	4b14      	ldr	r3, [pc, #80]	; (8009120 <USBH_LL_Init+0x74>)
 80090d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80090d6:	4b12      	ldr	r3, [pc, #72]	; (8009120 <USBH_LL_Init+0x74>)
 80090d8:	2208      	movs	r2, #8
 80090da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80090dc:	4b10      	ldr	r3, [pc, #64]	; (8009120 <USBH_LL_Init+0x74>)
 80090de:	2201      	movs	r2, #1
 80090e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090e2:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <USBH_LL_Init+0x74>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80090e8:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <USBH_LL_Init+0x74>)
 80090ea:	2202      	movs	r2, #2
 80090ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090ee:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <USBH_LL_Init+0x74>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80090f4:	480a      	ldr	r0, [pc, #40]	; (8009120 <USBH_LL_Init+0x74>)
 80090f6:	f7f9 f8a4 	bl	8002242 <HAL_HCD_Init>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009100:	f7f8 fa72 	bl	80015e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009104:	4806      	ldr	r0, [pc, #24]	; (8009120 <USBH_LL_Init+0x74>)
 8009106:	f7f9 fd05 	bl	8002b14 <HAL_HCD_GetCurrentFrame>
 800910a:	4603      	mov	r3, r0
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fe fede 	bl	8007ed0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	2000057c 	.word	0x2000057c

08009124 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800913a:	4618      	mov	r0, r3
 800913c:	f7f9 fc72 	bl	8002a24 <HAL_HCD_Start>
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f95e 	bl	8009408 <USBH_Get_USB_Status>
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009150:	7bbb      	ldrb	r3, [r7, #14]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009170:	4618      	mov	r0, r3
 8009172:	f7f9 fc7a 	bl	8002a6a <HAL_HCD_Stop>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	4618      	mov	r0, r3
 800917e:	f000 f943 	bl	8009408 <USBH_Get_USB_Status>
 8009182:	4603      	mov	r3, r0
 8009184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009186:	7bbb      	ldrb	r3, [r7, #14]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009198:	2301      	movs	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7f9 fcc4 	bl	8002b30 <HAL_HCD_GetCurrentSpeed>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d00c      	beq.n	80091c8 <USBH_LL_GetSpeed+0x38>
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d80d      	bhi.n	80091ce <USBH_LL_GetSpeed+0x3e>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <USBH_LL_GetSpeed+0x2c>
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d003      	beq.n	80091c2 <USBH_LL_GetSpeed+0x32>
 80091ba:	e008      	b.n	80091ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
    break;
 80091c0:	e008      	b.n	80091d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80091c2:	2301      	movs	r3, #1
 80091c4:	73fb      	strb	r3, [r7, #15]
    break;
 80091c6:	e005      	b.n	80091d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80091c8:	2302      	movs	r3, #2
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	e002      	b.n	80091d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80091ce:	2301      	movs	r3, #1
 80091d0:	73fb      	strb	r3, [r7, #15]
    break;
 80091d2:	bf00      	nop
  }
  return  speed;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f9 fc55 	bl	8002aa4 <HAL_HCD_ResetPort>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 f901 	bl	8009408 <USBH_Get_USB_Status>
 8009206:	4603      	mov	r3, r0
 8009208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920a:	7bbb      	ldrb	r3, [r7, #14]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009226:	78fa      	ldrb	r2, [r7, #3]
 8009228:	4611      	mov	r1, r2
 800922a:	4618      	mov	r0, r3
 800922c:	f7f9 fc5d 	bl	8002aea <HAL_HCD_HC_GetXferCount>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800923a:	b590      	push	{r4, r7, lr}
 800923c:	b089      	sub	sp, #36	; 0x24
 800923e:	af04      	add	r7, sp, #16
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	461a      	mov	r2, r3
 8009248:	4603      	mov	r3, r0
 800924a:	70fb      	strb	r3, [r7, #3]
 800924c:	460b      	mov	r3, r1
 800924e:	70bb      	strb	r3, [r7, #2]
 8009250:	4613      	mov	r3, r2
 8009252:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009262:	787c      	ldrb	r4, [r7, #1]
 8009264:	78ba      	ldrb	r2, [r7, #2]
 8009266:	78f9      	ldrb	r1, [r7, #3]
 8009268:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4623      	mov	r3, r4
 800927a:	f7f9 f849 	bl	8002310 <HAL_HCD_HC_Init>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f8bf 	bl	8009408 <USBH_Get_USB_Status>
 800928a:	4603      	mov	r3, r0
 800928c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	bd90      	pop	{r4, r7, pc}

08009298 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f9 f8e2 	bl	8002480 <HAL_HCD_HC_Halt>
 80092bc:	4603      	mov	r3, r0
 80092be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f8a0 	bl	8009408 <USBH_Get_USB_Status>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80092d6:	b590      	push	{r4, r7, lr}
 80092d8:	b089      	sub	sp, #36	; 0x24
 80092da:	af04      	add	r7, sp, #16
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	461a      	mov	r2, r3
 80092e4:	4603      	mov	r3, r0
 80092e6:	70fb      	strb	r3, [r7, #3]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70bb      	strb	r3, [r7, #2]
 80092ec:	4613      	mov	r3, r2
 80092ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092fe:	787c      	ldrb	r4, [r7, #1]
 8009300:	78ba      	ldrb	r2, [r7, #2]
 8009302:	78f9      	ldrb	r1, [r7, #3]
 8009304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800930c:	9302      	str	r3, [sp, #8]
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	4623      	mov	r3, r4
 800931a:	f7f9 f8d5 	bl	80024c8 <HAL_HCD_HC_SubmitRequest>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f86f 	bl	8009408 <USBH_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bd90      	pop	{r4, r7, pc}

08009338 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7f9 fbb6 	bl	8002ac0 <HAL_HCD_HC_GetURBState>
 8009354:	4603      	mov	r3, r0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009370:	2b01      	cmp	r3, #1
 8009372:	d103      	bne.n	800937c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f872 	bl	8009460 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800937c:	20c8      	movs	r0, #200	; 0xc8
 800937e:	f7f8 fc5d 	bl	8001c3c <HAL_Delay>
  return USBH_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
 8009398:	4613      	mov	r3, r2
 800939a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	68f9      	ldr	r1, [r7, #12]
 80093a8:	4613      	mov	r3, r2
 80093aa:	011b      	lsls	r3, r3, #4
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	440b      	add	r3, r1
 80093b2:	3317      	adds	r3, #23
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	68f9      	ldr	r1, [r7, #12]
 80093be:	4613      	mov	r3, r2
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	1a9b      	subs	r3, r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	440b      	add	r3, r1
 80093c8:	333c      	adds	r3, #60	; 0x3c
 80093ca:	78ba      	ldrb	r2, [r7, #2]
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e009      	b.n	80093e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4613      	mov	r3, r2
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	333d      	adds	r3, #61	; 0x3d
 80093e0:	78ba      	ldrb	r2, [r7, #2]
 80093e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7f8 fc1e 	bl	8001c3c <HAL_Delay>
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d817      	bhi.n	800944c <USBH_Get_USB_Status+0x44>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <USBH_Get_USB_Status+0x1c>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009435 	.word	0x08009435
 8009428:	0800943b 	.word	0x0800943b
 800942c:	08009441 	.word	0x08009441
 8009430:	08009447 	.word	0x08009447
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
    break;
 8009438:	e00b      	b.n	8009452 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800943a:	2302      	movs	r3, #2
 800943c:	73fb      	strb	r3, [r7, #15]
    break;
 800943e:	e008      	b.n	8009452 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
    break;
 8009444:	e005      	b.n	8009452 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009446:	2302      	movs	r3, #2
 8009448:	73fb      	strb	r3, [r7, #15]
    break;
 800944a:	e002      	b.n	8009452 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800944c:	2302      	movs	r3, #2
 800944e:	73fb      	strb	r3, [r7, #15]
    break;
 8009450:	bf00      	nop
  }
  return usb_status;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
 8009478:	e001      	b.n	800947e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800947a:	2301      	movs	r3, #1
 800947c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	461a      	mov	r2, r3
 8009482:	2101      	movs	r1, #1
 8009484:	4803      	ldr	r0, [pc, #12]	; (8009494 <MX_DriverVbusFS+0x34>)
 8009486:	f7f8 fec3 	bl	8002210 <HAL_GPIO_WritePin>
}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	40020800 	.word	0x40020800

08009498 <malloc>:
 8009498:	4b02      	ldr	r3, [pc, #8]	; (80094a4 <malloc+0xc>)
 800949a:	4601      	mov	r1, r0
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	f000 b82b 	b.w	80094f8 <_malloc_r>
 80094a2:	bf00      	nop
 80094a4:	20000078 	.word	0x20000078

080094a8 <free>:
 80094a8:	4b02      	ldr	r3, [pc, #8]	; (80094b4 <free+0xc>)
 80094aa:	4601      	mov	r1, r0
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	f000 b913 	b.w	80096d8 <_free_r>
 80094b2:	bf00      	nop
 80094b4:	20000078 	.word	0x20000078

080094b8 <sbrk_aligned>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	4e0e      	ldr	r6, [pc, #56]	; (80094f4 <sbrk_aligned+0x3c>)
 80094bc:	460c      	mov	r4, r1
 80094be:	6831      	ldr	r1, [r6, #0]
 80094c0:	4605      	mov	r5, r0
 80094c2:	b911      	cbnz	r1, 80094ca <sbrk_aligned+0x12>
 80094c4:	f000 f8cc 	bl	8009660 <_sbrk_r>
 80094c8:	6030      	str	r0, [r6, #0]
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f8c7 	bl	8009660 <_sbrk_r>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d00a      	beq.n	80094ec <sbrk_aligned+0x34>
 80094d6:	1cc4      	adds	r4, r0, #3
 80094d8:	f024 0403 	bic.w	r4, r4, #3
 80094dc:	42a0      	cmp	r0, r4
 80094de:	d007      	beq.n	80094f0 <sbrk_aligned+0x38>
 80094e0:	1a21      	subs	r1, r4, r0
 80094e2:	4628      	mov	r0, r5
 80094e4:	f000 f8bc 	bl	8009660 <_sbrk_r>
 80094e8:	3001      	adds	r0, #1
 80094ea:	d101      	bne.n	80094f0 <sbrk_aligned+0x38>
 80094ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094f0:	4620      	mov	r0, r4
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	20000960 	.word	0x20000960

080094f8 <_malloc_r>:
 80094f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094fc:	1ccd      	adds	r5, r1, #3
 80094fe:	f025 0503 	bic.w	r5, r5, #3
 8009502:	3508      	adds	r5, #8
 8009504:	2d0c      	cmp	r5, #12
 8009506:	bf38      	it	cc
 8009508:	250c      	movcc	r5, #12
 800950a:	2d00      	cmp	r5, #0
 800950c:	4607      	mov	r7, r0
 800950e:	db01      	blt.n	8009514 <_malloc_r+0x1c>
 8009510:	42a9      	cmp	r1, r5
 8009512:	d905      	bls.n	8009520 <_malloc_r+0x28>
 8009514:	230c      	movs	r3, #12
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	2600      	movs	r6, #0
 800951a:	4630      	mov	r0, r6
 800951c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095f4 <_malloc_r+0xfc>
 8009524:	f000 f868 	bl	80095f8 <__malloc_lock>
 8009528:	f8d8 3000 	ldr.w	r3, [r8]
 800952c:	461c      	mov	r4, r3
 800952e:	bb5c      	cbnz	r4, 8009588 <_malloc_r+0x90>
 8009530:	4629      	mov	r1, r5
 8009532:	4638      	mov	r0, r7
 8009534:	f7ff ffc0 	bl	80094b8 <sbrk_aligned>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	4604      	mov	r4, r0
 800953c:	d155      	bne.n	80095ea <_malloc_r+0xf2>
 800953e:	f8d8 4000 	ldr.w	r4, [r8]
 8009542:	4626      	mov	r6, r4
 8009544:	2e00      	cmp	r6, #0
 8009546:	d145      	bne.n	80095d4 <_malloc_r+0xdc>
 8009548:	2c00      	cmp	r4, #0
 800954a:	d048      	beq.n	80095de <_malloc_r+0xe6>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	4631      	mov	r1, r6
 8009550:	4638      	mov	r0, r7
 8009552:	eb04 0903 	add.w	r9, r4, r3
 8009556:	f000 f883 	bl	8009660 <_sbrk_r>
 800955a:	4581      	cmp	r9, r0
 800955c:	d13f      	bne.n	80095de <_malloc_r+0xe6>
 800955e:	6821      	ldr	r1, [r4, #0]
 8009560:	1a6d      	subs	r5, r5, r1
 8009562:	4629      	mov	r1, r5
 8009564:	4638      	mov	r0, r7
 8009566:	f7ff ffa7 	bl	80094b8 <sbrk_aligned>
 800956a:	3001      	adds	r0, #1
 800956c:	d037      	beq.n	80095de <_malloc_r+0xe6>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	442b      	add	r3, r5
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	f8d8 3000 	ldr.w	r3, [r8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d038      	beq.n	80095ee <_malloc_r+0xf6>
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	42a2      	cmp	r2, r4
 8009580:	d12b      	bne.n	80095da <_malloc_r+0xe2>
 8009582:	2200      	movs	r2, #0
 8009584:	605a      	str	r2, [r3, #4]
 8009586:	e00f      	b.n	80095a8 <_malloc_r+0xb0>
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	1b52      	subs	r2, r2, r5
 800958c:	d41f      	bmi.n	80095ce <_malloc_r+0xd6>
 800958e:	2a0b      	cmp	r2, #11
 8009590:	d917      	bls.n	80095c2 <_malloc_r+0xca>
 8009592:	1961      	adds	r1, r4, r5
 8009594:	42a3      	cmp	r3, r4
 8009596:	6025      	str	r5, [r4, #0]
 8009598:	bf18      	it	ne
 800959a:	6059      	strne	r1, [r3, #4]
 800959c:	6863      	ldr	r3, [r4, #4]
 800959e:	bf08      	it	eq
 80095a0:	f8c8 1000 	streq.w	r1, [r8]
 80095a4:	5162      	str	r2, [r4, r5]
 80095a6:	604b      	str	r3, [r1, #4]
 80095a8:	4638      	mov	r0, r7
 80095aa:	f104 060b 	add.w	r6, r4, #11
 80095ae:	f000 f829 	bl	8009604 <__malloc_unlock>
 80095b2:	f026 0607 	bic.w	r6, r6, #7
 80095b6:	1d23      	adds	r3, r4, #4
 80095b8:	1af2      	subs	r2, r6, r3
 80095ba:	d0ae      	beq.n	800951a <_malloc_r+0x22>
 80095bc:	1b9b      	subs	r3, r3, r6
 80095be:	50a3      	str	r3, [r4, r2]
 80095c0:	e7ab      	b.n	800951a <_malloc_r+0x22>
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	6862      	ldr	r2, [r4, #4]
 80095c6:	d1dd      	bne.n	8009584 <_malloc_r+0x8c>
 80095c8:	f8c8 2000 	str.w	r2, [r8]
 80095cc:	e7ec      	b.n	80095a8 <_malloc_r+0xb0>
 80095ce:	4623      	mov	r3, r4
 80095d0:	6864      	ldr	r4, [r4, #4]
 80095d2:	e7ac      	b.n	800952e <_malloc_r+0x36>
 80095d4:	4634      	mov	r4, r6
 80095d6:	6876      	ldr	r6, [r6, #4]
 80095d8:	e7b4      	b.n	8009544 <_malloc_r+0x4c>
 80095da:	4613      	mov	r3, r2
 80095dc:	e7cc      	b.n	8009578 <_malloc_r+0x80>
 80095de:	230c      	movs	r3, #12
 80095e0:	603b      	str	r3, [r7, #0]
 80095e2:	4638      	mov	r0, r7
 80095e4:	f000 f80e 	bl	8009604 <__malloc_unlock>
 80095e8:	e797      	b.n	800951a <_malloc_r+0x22>
 80095ea:	6025      	str	r5, [r4, #0]
 80095ec:	e7dc      	b.n	80095a8 <_malloc_r+0xb0>
 80095ee:	605b      	str	r3, [r3, #4]
 80095f0:	deff      	udf	#255	; 0xff
 80095f2:	bf00      	nop
 80095f4:	2000095c 	.word	0x2000095c

080095f8 <__malloc_lock>:
 80095f8:	4801      	ldr	r0, [pc, #4]	; (8009600 <__malloc_lock+0x8>)
 80095fa:	f000 b86b 	b.w	80096d4 <__retarget_lock_acquire_recursive>
 80095fe:	bf00      	nop
 8009600:	20000aa0 	.word	0x20000aa0

08009604 <__malloc_unlock>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__malloc_unlock+0x8>)
 8009606:	f000 b866 	b.w	80096d6 <__retarget_lock_release_recursive>
 800960a:	bf00      	nop
 800960c:	20000aa0 	.word	0x20000aa0

08009610 <siprintf>:
 8009610:	b40e      	push	{r1, r2, r3}
 8009612:	b500      	push	{lr}
 8009614:	b09c      	sub	sp, #112	; 0x70
 8009616:	ab1d      	add	r3, sp, #116	; 0x74
 8009618:	9002      	str	r0, [sp, #8]
 800961a:	9006      	str	r0, [sp, #24]
 800961c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009620:	4809      	ldr	r0, [pc, #36]	; (8009648 <siprintf+0x38>)
 8009622:	9107      	str	r1, [sp, #28]
 8009624:	9104      	str	r1, [sp, #16]
 8009626:	4909      	ldr	r1, [pc, #36]	; (800964c <siprintf+0x3c>)
 8009628:	f853 2b04 	ldr.w	r2, [r3], #4
 800962c:	9105      	str	r1, [sp, #20]
 800962e:	6800      	ldr	r0, [r0, #0]
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	a902      	add	r1, sp, #8
 8009634:	f000 f8f6 	bl	8009824 <_svfiprintf_r>
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	b01c      	add	sp, #112	; 0x70
 8009640:	f85d eb04 	ldr.w	lr, [sp], #4
 8009644:	b003      	add	sp, #12
 8009646:	4770      	bx	lr
 8009648:	20000078 	.word	0x20000078
 800964c:	ffff0208 	.word	0xffff0208

08009650 <memset>:
 8009650:	4402      	add	r2, r0
 8009652:	4603      	mov	r3, r0
 8009654:	4293      	cmp	r3, r2
 8009656:	d100      	bne.n	800965a <memset+0xa>
 8009658:	4770      	bx	lr
 800965a:	f803 1b01 	strb.w	r1, [r3], #1
 800965e:	e7f9      	b.n	8009654 <memset+0x4>

08009660 <_sbrk_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	; (800967c <_sbrk_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f8 fa02 	bl	8001a74 <_sbrk>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_sbrk_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_sbrk_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20000a9c 	.word	0x20000a9c

08009680 <__errno>:
 8009680:	4b01      	ldr	r3, [pc, #4]	; (8009688 <__errno+0x8>)
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20000078 	.word	0x20000078

0800968c <__libc_init_array>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	4d0d      	ldr	r5, [pc, #52]	; (80096c4 <__libc_init_array+0x38>)
 8009690:	4c0d      	ldr	r4, [pc, #52]	; (80096c8 <__libc_init_array+0x3c>)
 8009692:	1b64      	subs	r4, r4, r5
 8009694:	10a4      	asrs	r4, r4, #2
 8009696:	2600      	movs	r6, #0
 8009698:	42a6      	cmp	r6, r4
 800969a:	d109      	bne.n	80096b0 <__libc_init_array+0x24>
 800969c:	4d0b      	ldr	r5, [pc, #44]	; (80096cc <__libc_init_array+0x40>)
 800969e:	4c0c      	ldr	r4, [pc, #48]	; (80096d0 <__libc_init_array+0x44>)
 80096a0:	f000 fbae 	bl	8009e00 <_init>
 80096a4:	1b64      	subs	r4, r4, r5
 80096a6:	10a4      	asrs	r4, r4, #2
 80096a8:	2600      	movs	r6, #0
 80096aa:	42a6      	cmp	r6, r4
 80096ac:	d105      	bne.n	80096ba <__libc_init_array+0x2e>
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
 80096b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b4:	4798      	blx	r3
 80096b6:	3601      	adds	r6, #1
 80096b8:	e7ee      	b.n	8009698 <__libc_init_array+0xc>
 80096ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80096be:	4798      	blx	r3
 80096c0:	3601      	adds	r6, #1
 80096c2:	e7f2      	b.n	80096aa <__libc_init_array+0x1e>
 80096c4:	08009f2c 	.word	0x08009f2c
 80096c8:	08009f2c 	.word	0x08009f2c
 80096cc:	08009f2c 	.word	0x08009f2c
 80096d0:	08009f30 	.word	0x08009f30

080096d4 <__retarget_lock_acquire_recursive>:
 80096d4:	4770      	bx	lr

080096d6 <__retarget_lock_release_recursive>:
 80096d6:	4770      	bx	lr

080096d8 <_free_r>:
 80096d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096da:	2900      	cmp	r1, #0
 80096dc:	d044      	beq.n	8009768 <_free_r+0x90>
 80096de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e2:	9001      	str	r0, [sp, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ea:	bfb8      	it	lt
 80096ec:	18e4      	addlt	r4, r4, r3
 80096ee:	f7ff ff83 	bl	80095f8 <__malloc_lock>
 80096f2:	4a1e      	ldr	r2, [pc, #120]	; (800976c <_free_r+0x94>)
 80096f4:	9801      	ldr	r0, [sp, #4]
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	b933      	cbnz	r3, 8009708 <_free_r+0x30>
 80096fa:	6063      	str	r3, [r4, #4]
 80096fc:	6014      	str	r4, [r2, #0]
 80096fe:	b003      	add	sp, #12
 8009700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009704:	f7ff bf7e 	b.w	8009604 <__malloc_unlock>
 8009708:	42a3      	cmp	r3, r4
 800970a:	d908      	bls.n	800971e <_free_r+0x46>
 800970c:	6825      	ldr	r5, [r4, #0]
 800970e:	1961      	adds	r1, r4, r5
 8009710:	428b      	cmp	r3, r1
 8009712:	bf01      	itttt	eq
 8009714:	6819      	ldreq	r1, [r3, #0]
 8009716:	685b      	ldreq	r3, [r3, #4]
 8009718:	1949      	addeq	r1, r1, r5
 800971a:	6021      	streq	r1, [r4, #0]
 800971c:	e7ed      	b.n	80096fa <_free_r+0x22>
 800971e:	461a      	mov	r2, r3
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	b10b      	cbz	r3, 8009728 <_free_r+0x50>
 8009724:	42a3      	cmp	r3, r4
 8009726:	d9fa      	bls.n	800971e <_free_r+0x46>
 8009728:	6811      	ldr	r1, [r2, #0]
 800972a:	1855      	adds	r5, r2, r1
 800972c:	42a5      	cmp	r5, r4
 800972e:	d10b      	bne.n	8009748 <_free_r+0x70>
 8009730:	6824      	ldr	r4, [r4, #0]
 8009732:	4421      	add	r1, r4
 8009734:	1854      	adds	r4, r2, r1
 8009736:	42a3      	cmp	r3, r4
 8009738:	6011      	str	r1, [r2, #0]
 800973a:	d1e0      	bne.n	80096fe <_free_r+0x26>
 800973c:	681c      	ldr	r4, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	6053      	str	r3, [r2, #4]
 8009742:	440c      	add	r4, r1
 8009744:	6014      	str	r4, [r2, #0]
 8009746:	e7da      	b.n	80096fe <_free_r+0x26>
 8009748:	d902      	bls.n	8009750 <_free_r+0x78>
 800974a:	230c      	movs	r3, #12
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	e7d6      	b.n	80096fe <_free_r+0x26>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	1961      	adds	r1, r4, r5
 8009754:	428b      	cmp	r3, r1
 8009756:	bf04      	itt	eq
 8009758:	6819      	ldreq	r1, [r3, #0]
 800975a:	685b      	ldreq	r3, [r3, #4]
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	bf04      	itt	eq
 8009760:	1949      	addeq	r1, r1, r5
 8009762:	6021      	streq	r1, [r4, #0]
 8009764:	6054      	str	r4, [r2, #4]
 8009766:	e7ca      	b.n	80096fe <_free_r+0x26>
 8009768:	b003      	add	sp, #12
 800976a:	bd30      	pop	{r4, r5, pc}
 800976c:	2000095c 	.word	0x2000095c

08009770 <__ssputs_r>:
 8009770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	688e      	ldr	r6, [r1, #8]
 8009776:	461f      	mov	r7, r3
 8009778:	42be      	cmp	r6, r7
 800977a:	680b      	ldr	r3, [r1, #0]
 800977c:	4682      	mov	sl, r0
 800977e:	460c      	mov	r4, r1
 8009780:	4690      	mov	r8, r2
 8009782:	d82c      	bhi.n	80097de <__ssputs_r+0x6e>
 8009784:	898a      	ldrh	r2, [r1, #12]
 8009786:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800978a:	d026      	beq.n	80097da <__ssputs_r+0x6a>
 800978c:	6965      	ldr	r5, [r4, #20]
 800978e:	6909      	ldr	r1, [r1, #16]
 8009790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009794:	eba3 0901 	sub.w	r9, r3, r1
 8009798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800979c:	1c7b      	adds	r3, r7, #1
 800979e:	444b      	add	r3, r9
 80097a0:	106d      	asrs	r5, r5, #1
 80097a2:	429d      	cmp	r5, r3
 80097a4:	bf38      	it	cc
 80097a6:	461d      	movcc	r5, r3
 80097a8:	0553      	lsls	r3, r2, #21
 80097aa:	d527      	bpl.n	80097fc <__ssputs_r+0x8c>
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7ff fea3 	bl	80094f8 <_malloc_r>
 80097b2:	4606      	mov	r6, r0
 80097b4:	b360      	cbz	r0, 8009810 <__ssputs_r+0xa0>
 80097b6:	6921      	ldr	r1, [r4, #16]
 80097b8:	464a      	mov	r2, r9
 80097ba:	f000 fadb 	bl	8009d74 <memcpy>
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	6126      	str	r6, [r4, #16]
 80097cc:	6165      	str	r5, [r4, #20]
 80097ce:	444e      	add	r6, r9
 80097d0:	eba5 0509 	sub.w	r5, r5, r9
 80097d4:	6026      	str	r6, [r4, #0]
 80097d6:	60a5      	str	r5, [r4, #8]
 80097d8:	463e      	mov	r6, r7
 80097da:	42be      	cmp	r6, r7
 80097dc:	d900      	bls.n	80097e0 <__ssputs_r+0x70>
 80097de:	463e      	mov	r6, r7
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	4632      	mov	r2, r6
 80097e4:	4641      	mov	r1, r8
 80097e6:	f000 faab 	bl	8009d40 <memmove>
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	1b9b      	subs	r3, r3, r6
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	4433      	add	r3, r6
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	2000      	movs	r0, #0
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	462a      	mov	r2, r5
 80097fe:	f000 fac7 	bl	8009d90 <_realloc_r>
 8009802:	4606      	mov	r6, r0
 8009804:	2800      	cmp	r0, #0
 8009806:	d1e0      	bne.n	80097ca <__ssputs_r+0x5a>
 8009808:	6921      	ldr	r1, [r4, #16]
 800980a:	4650      	mov	r0, sl
 800980c:	f7ff ff64 	bl	80096d8 <_free_r>
 8009810:	230c      	movs	r3, #12
 8009812:	f8ca 3000 	str.w	r3, [sl]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009822:	e7e9      	b.n	80097f8 <__ssputs_r+0x88>

08009824 <_svfiprintf_r>:
 8009824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009828:	4698      	mov	r8, r3
 800982a:	898b      	ldrh	r3, [r1, #12]
 800982c:	061b      	lsls	r3, r3, #24
 800982e:	b09d      	sub	sp, #116	; 0x74
 8009830:	4607      	mov	r7, r0
 8009832:	460d      	mov	r5, r1
 8009834:	4614      	mov	r4, r2
 8009836:	d50e      	bpl.n	8009856 <_svfiprintf_r+0x32>
 8009838:	690b      	ldr	r3, [r1, #16]
 800983a:	b963      	cbnz	r3, 8009856 <_svfiprintf_r+0x32>
 800983c:	2140      	movs	r1, #64	; 0x40
 800983e:	f7ff fe5b 	bl	80094f8 <_malloc_r>
 8009842:	6028      	str	r0, [r5, #0]
 8009844:	6128      	str	r0, [r5, #16]
 8009846:	b920      	cbnz	r0, 8009852 <_svfiprintf_r+0x2e>
 8009848:	230c      	movs	r3, #12
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009850:	e0d0      	b.n	80099f4 <_svfiprintf_r+0x1d0>
 8009852:	2340      	movs	r3, #64	; 0x40
 8009854:	616b      	str	r3, [r5, #20]
 8009856:	2300      	movs	r3, #0
 8009858:	9309      	str	r3, [sp, #36]	; 0x24
 800985a:	2320      	movs	r3, #32
 800985c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009860:	f8cd 800c 	str.w	r8, [sp, #12]
 8009864:	2330      	movs	r3, #48	; 0x30
 8009866:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a0c <_svfiprintf_r+0x1e8>
 800986a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800986e:	f04f 0901 	mov.w	r9, #1
 8009872:	4623      	mov	r3, r4
 8009874:	469a      	mov	sl, r3
 8009876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800987a:	b10a      	cbz	r2, 8009880 <_svfiprintf_r+0x5c>
 800987c:	2a25      	cmp	r2, #37	; 0x25
 800987e:	d1f9      	bne.n	8009874 <_svfiprintf_r+0x50>
 8009880:	ebba 0b04 	subs.w	fp, sl, r4
 8009884:	d00b      	beq.n	800989e <_svfiprintf_r+0x7a>
 8009886:	465b      	mov	r3, fp
 8009888:	4622      	mov	r2, r4
 800988a:	4629      	mov	r1, r5
 800988c:	4638      	mov	r0, r7
 800988e:	f7ff ff6f 	bl	8009770 <__ssputs_r>
 8009892:	3001      	adds	r0, #1
 8009894:	f000 80a9 	beq.w	80099ea <_svfiprintf_r+0x1c6>
 8009898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800989a:	445a      	add	r2, fp
 800989c:	9209      	str	r2, [sp, #36]	; 0x24
 800989e:	f89a 3000 	ldrb.w	r3, [sl]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80a1 	beq.w	80099ea <_svfiprintf_r+0x1c6>
 80098a8:	2300      	movs	r3, #0
 80098aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098b2:	f10a 0a01 	add.w	sl, sl, #1
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	9307      	str	r3, [sp, #28]
 80098ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098be:	931a      	str	r3, [sp, #104]	; 0x68
 80098c0:	4654      	mov	r4, sl
 80098c2:	2205      	movs	r2, #5
 80098c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c8:	4850      	ldr	r0, [pc, #320]	; (8009a0c <_svfiprintf_r+0x1e8>)
 80098ca:	f7f6 fc81 	bl	80001d0 <memchr>
 80098ce:	9a04      	ldr	r2, [sp, #16]
 80098d0:	b9d8      	cbnz	r0, 800990a <_svfiprintf_r+0xe6>
 80098d2:	06d0      	lsls	r0, r2, #27
 80098d4:	bf44      	itt	mi
 80098d6:	2320      	movmi	r3, #32
 80098d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098dc:	0711      	lsls	r1, r2, #28
 80098de:	bf44      	itt	mi
 80098e0:	232b      	movmi	r3, #43	; 0x2b
 80098e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ea:	2b2a      	cmp	r3, #42	; 0x2a
 80098ec:	d015      	beq.n	800991a <_svfiprintf_r+0xf6>
 80098ee:	9a07      	ldr	r2, [sp, #28]
 80098f0:	4654      	mov	r4, sl
 80098f2:	2000      	movs	r0, #0
 80098f4:	f04f 0c0a 	mov.w	ip, #10
 80098f8:	4621      	mov	r1, r4
 80098fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098fe:	3b30      	subs	r3, #48	; 0x30
 8009900:	2b09      	cmp	r3, #9
 8009902:	d94d      	bls.n	80099a0 <_svfiprintf_r+0x17c>
 8009904:	b1b0      	cbz	r0, 8009934 <_svfiprintf_r+0x110>
 8009906:	9207      	str	r2, [sp, #28]
 8009908:	e014      	b.n	8009934 <_svfiprintf_r+0x110>
 800990a:	eba0 0308 	sub.w	r3, r0, r8
 800990e:	fa09 f303 	lsl.w	r3, r9, r3
 8009912:	4313      	orrs	r3, r2
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	46a2      	mov	sl, r4
 8009918:	e7d2      	b.n	80098c0 <_svfiprintf_r+0x9c>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	1d19      	adds	r1, r3, #4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	9103      	str	r1, [sp, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfbb      	ittet	lt
 8009926:	425b      	neglt	r3, r3
 8009928:	f042 0202 	orrlt.w	r2, r2, #2
 800992c:	9307      	strge	r3, [sp, #28]
 800992e:	9307      	strlt	r3, [sp, #28]
 8009930:	bfb8      	it	lt
 8009932:	9204      	strlt	r2, [sp, #16]
 8009934:	7823      	ldrb	r3, [r4, #0]
 8009936:	2b2e      	cmp	r3, #46	; 0x2e
 8009938:	d10c      	bne.n	8009954 <_svfiprintf_r+0x130>
 800993a:	7863      	ldrb	r3, [r4, #1]
 800993c:	2b2a      	cmp	r3, #42	; 0x2a
 800993e:	d134      	bne.n	80099aa <_svfiprintf_r+0x186>
 8009940:	9b03      	ldr	r3, [sp, #12]
 8009942:	1d1a      	adds	r2, r3, #4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	9203      	str	r2, [sp, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfb8      	it	lt
 800994c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009950:	3402      	adds	r4, #2
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a1c <_svfiprintf_r+0x1f8>
 8009958:	7821      	ldrb	r1, [r4, #0]
 800995a:	2203      	movs	r2, #3
 800995c:	4650      	mov	r0, sl
 800995e:	f7f6 fc37 	bl	80001d0 <memchr>
 8009962:	b138      	cbz	r0, 8009974 <_svfiprintf_r+0x150>
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	eba0 000a 	sub.w	r0, r0, sl
 800996a:	2240      	movs	r2, #64	; 0x40
 800996c:	4082      	lsls	r2, r0
 800996e:	4313      	orrs	r3, r2
 8009970:	3401      	adds	r4, #1
 8009972:	9304      	str	r3, [sp, #16]
 8009974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009978:	4825      	ldr	r0, [pc, #148]	; (8009a10 <_svfiprintf_r+0x1ec>)
 800997a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800997e:	2206      	movs	r2, #6
 8009980:	f7f6 fc26 	bl	80001d0 <memchr>
 8009984:	2800      	cmp	r0, #0
 8009986:	d038      	beq.n	80099fa <_svfiprintf_r+0x1d6>
 8009988:	4b22      	ldr	r3, [pc, #136]	; (8009a14 <_svfiprintf_r+0x1f0>)
 800998a:	bb1b      	cbnz	r3, 80099d4 <_svfiprintf_r+0x1b0>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	3307      	adds	r3, #7
 8009990:	f023 0307 	bic.w	r3, r3, #7
 8009994:	3308      	adds	r3, #8
 8009996:	9303      	str	r3, [sp, #12]
 8009998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999a:	4433      	add	r3, r6
 800999c:	9309      	str	r3, [sp, #36]	; 0x24
 800999e:	e768      	b.n	8009872 <_svfiprintf_r+0x4e>
 80099a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099a4:	460c      	mov	r4, r1
 80099a6:	2001      	movs	r0, #1
 80099a8:	e7a6      	b.n	80098f8 <_svfiprintf_r+0xd4>
 80099aa:	2300      	movs	r3, #0
 80099ac:	3401      	adds	r4, #1
 80099ae:	9305      	str	r3, [sp, #20]
 80099b0:	4619      	mov	r1, r3
 80099b2:	f04f 0c0a 	mov.w	ip, #10
 80099b6:	4620      	mov	r0, r4
 80099b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099bc:	3a30      	subs	r2, #48	; 0x30
 80099be:	2a09      	cmp	r2, #9
 80099c0:	d903      	bls.n	80099ca <_svfiprintf_r+0x1a6>
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0c6      	beq.n	8009954 <_svfiprintf_r+0x130>
 80099c6:	9105      	str	r1, [sp, #20]
 80099c8:	e7c4      	b.n	8009954 <_svfiprintf_r+0x130>
 80099ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ce:	4604      	mov	r4, r0
 80099d0:	2301      	movs	r3, #1
 80099d2:	e7f0      	b.n	80099b6 <_svfiprintf_r+0x192>
 80099d4:	ab03      	add	r3, sp, #12
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	462a      	mov	r2, r5
 80099da:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <_svfiprintf_r+0x1f4>)
 80099dc:	a904      	add	r1, sp, #16
 80099de:	4638      	mov	r0, r7
 80099e0:	f3af 8000 	nop.w
 80099e4:	1c42      	adds	r2, r0, #1
 80099e6:	4606      	mov	r6, r0
 80099e8:	d1d6      	bne.n	8009998 <_svfiprintf_r+0x174>
 80099ea:	89ab      	ldrh	r3, [r5, #12]
 80099ec:	065b      	lsls	r3, r3, #25
 80099ee:	f53f af2d 	bmi.w	800984c <_svfiprintf_r+0x28>
 80099f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099f4:	b01d      	add	sp, #116	; 0x74
 80099f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fa:	ab03      	add	r3, sp, #12
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	462a      	mov	r2, r5
 8009a00:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <_svfiprintf_r+0x1f4>)
 8009a02:	a904      	add	r1, sp, #16
 8009a04:	4638      	mov	r0, r7
 8009a06:	f000 f879 	bl	8009afc <_printf_i>
 8009a0a:	e7eb      	b.n	80099e4 <_svfiprintf_r+0x1c0>
 8009a0c:	08009ef0 	.word	0x08009ef0
 8009a10:	08009efa 	.word	0x08009efa
 8009a14:	00000000 	.word	0x00000000
 8009a18:	08009771 	.word	0x08009771
 8009a1c:	08009ef6 	.word	0x08009ef6

08009a20 <_printf_common>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	4616      	mov	r6, r2
 8009a26:	4699      	mov	r9, r3
 8009a28:	688a      	ldr	r2, [r1, #8]
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	bfb8      	it	lt
 8009a34:	4613      	movlt	r3, r2
 8009a36:	6033      	str	r3, [r6, #0]
 8009a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	b10a      	cbz	r2, 8009a46 <_printf_common+0x26>
 8009a42:	3301      	adds	r3, #1
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	0699      	lsls	r1, r3, #26
 8009a4a:	bf42      	ittt	mi
 8009a4c:	6833      	ldrmi	r3, [r6, #0]
 8009a4e:	3302      	addmi	r3, #2
 8009a50:	6033      	strmi	r3, [r6, #0]
 8009a52:	6825      	ldr	r5, [r4, #0]
 8009a54:	f015 0506 	ands.w	r5, r5, #6
 8009a58:	d106      	bne.n	8009a68 <_printf_common+0x48>
 8009a5a:	f104 0a19 	add.w	sl, r4, #25
 8009a5e:	68e3      	ldr	r3, [r4, #12]
 8009a60:	6832      	ldr	r2, [r6, #0]
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	dc26      	bgt.n	8009ab6 <_printf_common+0x96>
 8009a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a6c:	1e13      	subs	r3, r2, #0
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	2301      	movne	r3, #1
 8009a74:	0692      	lsls	r2, r2, #26
 8009a76:	d42b      	bmi.n	8009ad0 <_printf_common+0xb0>
 8009a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4638      	mov	r0, r7
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d01e      	beq.n	8009ac4 <_printf_common+0xa4>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	f003 0306 	and.w	r3, r3, #6
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	bf02      	ittt	eq
 8009a92:	68e5      	ldreq	r5, [r4, #12]
 8009a94:	6833      	ldreq	r3, [r6, #0]
 8009a96:	1aed      	subeq	r5, r5, r3
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	bf0c      	ite	eq
 8009a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aa0:	2500      	movne	r5, #0
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bfc4      	itt	gt
 8009aa6:	1a9b      	subgt	r3, r3, r2
 8009aa8:	18ed      	addgt	r5, r5, r3
 8009aaa:	2600      	movs	r6, #0
 8009aac:	341a      	adds	r4, #26
 8009aae:	42b5      	cmp	r5, r6
 8009ab0:	d11a      	bne.n	8009ae8 <_printf_common+0xc8>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e008      	b.n	8009ac8 <_printf_common+0xa8>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4652      	mov	r2, sl
 8009aba:	4649      	mov	r1, r9
 8009abc:	4638      	mov	r0, r7
 8009abe:	47c0      	blx	r8
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d103      	bne.n	8009acc <_printf_common+0xac>
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009acc:	3501      	adds	r5, #1
 8009ace:	e7c6      	b.n	8009a5e <_printf_common+0x3e>
 8009ad0:	18e1      	adds	r1, r4, r3
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	2030      	movs	r0, #48	; 0x30
 8009ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ada:	4422      	add	r2, r4
 8009adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	e7c7      	b.n	8009a78 <_printf_common+0x58>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	4622      	mov	r2, r4
 8009aec:	4649      	mov	r1, r9
 8009aee:	4638      	mov	r0, r7
 8009af0:	47c0      	blx	r8
 8009af2:	3001      	adds	r0, #1
 8009af4:	d0e6      	beq.n	8009ac4 <_printf_common+0xa4>
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7d9      	b.n	8009aae <_printf_common+0x8e>
	...

08009afc <_printf_i>:
 8009afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	7e0f      	ldrb	r7, [r1, #24]
 8009b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b04:	2f78      	cmp	r7, #120	; 0x78
 8009b06:	4691      	mov	r9, r2
 8009b08:	4680      	mov	r8, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	469a      	mov	sl, r3
 8009b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b12:	d807      	bhi.n	8009b24 <_printf_i+0x28>
 8009b14:	2f62      	cmp	r7, #98	; 0x62
 8009b16:	d80a      	bhi.n	8009b2e <_printf_i+0x32>
 8009b18:	2f00      	cmp	r7, #0
 8009b1a:	f000 80d4 	beq.w	8009cc6 <_printf_i+0x1ca>
 8009b1e:	2f58      	cmp	r7, #88	; 0x58
 8009b20:	f000 80c0 	beq.w	8009ca4 <_printf_i+0x1a8>
 8009b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b2c:	e03a      	b.n	8009ba4 <_printf_i+0xa8>
 8009b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b32:	2b15      	cmp	r3, #21
 8009b34:	d8f6      	bhi.n	8009b24 <_printf_i+0x28>
 8009b36:	a101      	add	r1, pc, #4	; (adr r1, 8009b3c <_printf_i+0x40>)
 8009b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	08009ba9 	.word	0x08009ba9
 8009b44:	08009b25 	.word	0x08009b25
 8009b48:	08009b25 	.word	0x08009b25
 8009b4c:	08009b25 	.word	0x08009b25
 8009b50:	08009b25 	.word	0x08009b25
 8009b54:	08009ba9 	.word	0x08009ba9
 8009b58:	08009b25 	.word	0x08009b25
 8009b5c:	08009b25 	.word	0x08009b25
 8009b60:	08009b25 	.word	0x08009b25
 8009b64:	08009b25 	.word	0x08009b25
 8009b68:	08009cad 	.word	0x08009cad
 8009b6c:	08009bd5 	.word	0x08009bd5
 8009b70:	08009c67 	.word	0x08009c67
 8009b74:	08009b25 	.word	0x08009b25
 8009b78:	08009b25 	.word	0x08009b25
 8009b7c:	08009ccf 	.word	0x08009ccf
 8009b80:	08009b25 	.word	0x08009b25
 8009b84:	08009bd5 	.word	0x08009bd5
 8009b88:	08009b25 	.word	0x08009b25
 8009b8c:	08009b25 	.word	0x08009b25
 8009b90:	08009c6f 	.word	0x08009c6f
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e09f      	b.n	8009ce8 <_printf_i+0x1ec>
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	0607      	lsls	r7, r0, #24
 8009bae:	f103 0104 	add.w	r1, r3, #4
 8009bb2:	6029      	str	r1, [r5, #0]
 8009bb4:	d501      	bpl.n	8009bba <_printf_i+0xbe>
 8009bb6:	681e      	ldr	r6, [r3, #0]
 8009bb8:	e003      	b.n	8009bc2 <_printf_i+0xc6>
 8009bba:	0646      	lsls	r6, r0, #25
 8009bbc:	d5fb      	bpl.n	8009bb6 <_printf_i+0xba>
 8009bbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	da03      	bge.n	8009bce <_printf_i+0xd2>
 8009bc6:	232d      	movs	r3, #45	; 0x2d
 8009bc8:	4276      	negs	r6, r6
 8009bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bce:	485a      	ldr	r0, [pc, #360]	; (8009d38 <_printf_i+0x23c>)
 8009bd0:	230a      	movs	r3, #10
 8009bd2:	e012      	b.n	8009bfa <_printf_i+0xfe>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	6820      	ldr	r0, [r4, #0]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	6029      	str	r1, [r5, #0]
 8009bdc:	0605      	lsls	r5, r0, #24
 8009bde:	d501      	bpl.n	8009be4 <_printf_i+0xe8>
 8009be0:	681e      	ldr	r6, [r3, #0]
 8009be2:	e002      	b.n	8009bea <_printf_i+0xee>
 8009be4:	0641      	lsls	r1, r0, #25
 8009be6:	d5fb      	bpl.n	8009be0 <_printf_i+0xe4>
 8009be8:	881e      	ldrh	r6, [r3, #0]
 8009bea:	4853      	ldr	r0, [pc, #332]	; (8009d38 <_printf_i+0x23c>)
 8009bec:	2f6f      	cmp	r7, #111	; 0x6f
 8009bee:	bf0c      	ite	eq
 8009bf0:	2308      	moveq	r3, #8
 8009bf2:	230a      	movne	r3, #10
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bfa:	6865      	ldr	r5, [r4, #4]
 8009bfc:	60a5      	str	r5, [r4, #8]
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	bfa2      	ittt	ge
 8009c02:	6821      	ldrge	r1, [r4, #0]
 8009c04:	f021 0104 	bicge.w	r1, r1, #4
 8009c08:	6021      	strge	r1, [r4, #0]
 8009c0a:	b90e      	cbnz	r6, 8009c10 <_printf_i+0x114>
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	d04b      	beq.n	8009ca8 <_printf_i+0x1ac>
 8009c10:	4615      	mov	r5, r2
 8009c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c16:	fb03 6711 	mls	r7, r3, r1, r6
 8009c1a:	5dc7      	ldrb	r7, [r0, r7]
 8009c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c20:	4637      	mov	r7, r6
 8009c22:	42bb      	cmp	r3, r7
 8009c24:	460e      	mov	r6, r1
 8009c26:	d9f4      	bls.n	8009c12 <_printf_i+0x116>
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d10b      	bne.n	8009c44 <_printf_i+0x148>
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	07de      	lsls	r6, r3, #31
 8009c30:	d508      	bpl.n	8009c44 <_printf_i+0x148>
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	6861      	ldr	r1, [r4, #4]
 8009c36:	4299      	cmp	r1, r3
 8009c38:	bfde      	ittt	le
 8009c3a:	2330      	movle	r3, #48	; 0x30
 8009c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c44:	1b52      	subs	r2, r2, r5
 8009c46:	6122      	str	r2, [r4, #16]
 8009c48:	f8cd a000 	str.w	sl, [sp]
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	aa03      	add	r2, sp, #12
 8009c50:	4621      	mov	r1, r4
 8009c52:	4640      	mov	r0, r8
 8009c54:	f7ff fee4 	bl	8009a20 <_printf_common>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d14a      	bne.n	8009cf2 <_printf_i+0x1f6>
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c60:	b004      	add	sp, #16
 8009c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	f043 0320 	orr.w	r3, r3, #32
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	4833      	ldr	r0, [pc, #204]	; (8009d3c <_printf_i+0x240>)
 8009c70:	2778      	movs	r7, #120	; 0x78
 8009c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	6829      	ldr	r1, [r5, #0]
 8009c7a:	061f      	lsls	r7, r3, #24
 8009c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c80:	d402      	bmi.n	8009c88 <_printf_i+0x18c>
 8009c82:	065f      	lsls	r7, r3, #25
 8009c84:	bf48      	it	mi
 8009c86:	b2b6      	uxthmi	r6, r6
 8009c88:	07df      	lsls	r7, r3, #31
 8009c8a:	bf48      	it	mi
 8009c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009c90:	6029      	str	r1, [r5, #0]
 8009c92:	bf48      	it	mi
 8009c94:	6023      	strmi	r3, [r4, #0]
 8009c96:	b91e      	cbnz	r6, 8009ca0 <_printf_i+0x1a4>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	f023 0320 	bic.w	r3, r3, #32
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	e7a7      	b.n	8009bf4 <_printf_i+0xf8>
 8009ca4:	4824      	ldr	r0, [pc, #144]	; (8009d38 <_printf_i+0x23c>)
 8009ca6:	e7e4      	b.n	8009c72 <_printf_i+0x176>
 8009ca8:	4615      	mov	r5, r2
 8009caa:	e7bd      	b.n	8009c28 <_printf_i+0x12c>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	6826      	ldr	r6, [r4, #0]
 8009cb0:	6961      	ldr	r1, [r4, #20]
 8009cb2:	1d18      	adds	r0, r3, #4
 8009cb4:	6028      	str	r0, [r5, #0]
 8009cb6:	0635      	lsls	r5, r6, #24
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	d501      	bpl.n	8009cc0 <_printf_i+0x1c4>
 8009cbc:	6019      	str	r1, [r3, #0]
 8009cbe:	e002      	b.n	8009cc6 <_printf_i+0x1ca>
 8009cc0:	0670      	lsls	r0, r6, #25
 8009cc2:	d5fb      	bpl.n	8009cbc <_printf_i+0x1c0>
 8009cc4:	8019      	strh	r1, [r3, #0]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6123      	str	r3, [r4, #16]
 8009cca:	4615      	mov	r5, r2
 8009ccc:	e7bc      	b.n	8009c48 <_printf_i+0x14c>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	1d1a      	adds	r2, r3, #4
 8009cd2:	602a      	str	r2, [r5, #0]
 8009cd4:	681d      	ldr	r5, [r3, #0]
 8009cd6:	6862      	ldr	r2, [r4, #4]
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f7f6 fa78 	bl	80001d0 <memchr>
 8009ce0:	b108      	cbz	r0, 8009ce6 <_printf_i+0x1ea>
 8009ce2:	1b40      	subs	r0, r0, r5
 8009ce4:	6060      	str	r0, [r4, #4]
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	2300      	movs	r3, #0
 8009cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf0:	e7aa      	b.n	8009c48 <_printf_i+0x14c>
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	47d0      	blx	sl
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d0ad      	beq.n	8009c5c <_printf_i+0x160>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	079b      	lsls	r3, r3, #30
 8009d04:	d413      	bmi.n	8009d2e <_printf_i+0x232>
 8009d06:	68e0      	ldr	r0, [r4, #12]
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	4298      	cmp	r0, r3
 8009d0c:	bfb8      	it	lt
 8009d0e:	4618      	movlt	r0, r3
 8009d10:	e7a6      	b.n	8009c60 <_printf_i+0x164>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4632      	mov	r2, r6
 8009d16:	4649      	mov	r1, r9
 8009d18:	4640      	mov	r0, r8
 8009d1a:	47d0      	blx	sl
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d09d      	beq.n	8009c5c <_printf_i+0x160>
 8009d20:	3501      	adds	r5, #1
 8009d22:	68e3      	ldr	r3, [r4, #12]
 8009d24:	9903      	ldr	r1, [sp, #12]
 8009d26:	1a5b      	subs	r3, r3, r1
 8009d28:	42ab      	cmp	r3, r5
 8009d2a:	dcf2      	bgt.n	8009d12 <_printf_i+0x216>
 8009d2c:	e7eb      	b.n	8009d06 <_printf_i+0x20a>
 8009d2e:	2500      	movs	r5, #0
 8009d30:	f104 0619 	add.w	r6, r4, #25
 8009d34:	e7f5      	b.n	8009d22 <_printf_i+0x226>
 8009d36:	bf00      	nop
 8009d38:	08009f01 	.word	0x08009f01
 8009d3c:	08009f12 	.word	0x08009f12

08009d40 <memmove>:
 8009d40:	4288      	cmp	r0, r1
 8009d42:	b510      	push	{r4, lr}
 8009d44:	eb01 0402 	add.w	r4, r1, r2
 8009d48:	d902      	bls.n	8009d50 <memmove+0x10>
 8009d4a:	4284      	cmp	r4, r0
 8009d4c:	4623      	mov	r3, r4
 8009d4e:	d807      	bhi.n	8009d60 <memmove+0x20>
 8009d50:	1e43      	subs	r3, r0, #1
 8009d52:	42a1      	cmp	r1, r4
 8009d54:	d008      	beq.n	8009d68 <memmove+0x28>
 8009d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d5e:	e7f8      	b.n	8009d52 <memmove+0x12>
 8009d60:	4402      	add	r2, r0
 8009d62:	4601      	mov	r1, r0
 8009d64:	428a      	cmp	r2, r1
 8009d66:	d100      	bne.n	8009d6a <memmove+0x2a>
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d72:	e7f7      	b.n	8009d64 <memmove+0x24>

08009d74 <memcpy>:
 8009d74:	440a      	add	r2, r1
 8009d76:	4291      	cmp	r1, r2
 8009d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d7c:	d100      	bne.n	8009d80 <memcpy+0xc>
 8009d7e:	4770      	bx	lr
 8009d80:	b510      	push	{r4, lr}
 8009d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d8a:	4291      	cmp	r1, r2
 8009d8c:	d1f9      	bne.n	8009d82 <memcpy+0xe>
 8009d8e:	bd10      	pop	{r4, pc}

08009d90 <_realloc_r>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	4680      	mov	r8, r0
 8009d96:	4614      	mov	r4, r2
 8009d98:	460e      	mov	r6, r1
 8009d9a:	b921      	cbnz	r1, 8009da6 <_realloc_r+0x16>
 8009d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	4611      	mov	r1, r2
 8009da2:	f7ff bba9 	b.w	80094f8 <_malloc_r>
 8009da6:	b92a      	cbnz	r2, 8009db4 <_realloc_r+0x24>
 8009da8:	f7ff fc96 	bl	80096d8 <_free_r>
 8009dac:	4625      	mov	r5, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db4:	f000 f81b 	bl	8009dee <_malloc_usable_size_r>
 8009db8:	4284      	cmp	r4, r0
 8009dba:	4607      	mov	r7, r0
 8009dbc:	d802      	bhi.n	8009dc4 <_realloc_r+0x34>
 8009dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dc2:	d812      	bhi.n	8009dea <_realloc_r+0x5a>
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7ff fb96 	bl	80094f8 <_malloc_r>
 8009dcc:	4605      	mov	r5, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0ed      	beq.n	8009dae <_realloc_r+0x1e>
 8009dd2:	42bc      	cmp	r4, r7
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	bf28      	it	cs
 8009dda:	463a      	movcs	r2, r7
 8009ddc:	f7ff ffca 	bl	8009d74 <memcpy>
 8009de0:	4631      	mov	r1, r6
 8009de2:	4640      	mov	r0, r8
 8009de4:	f7ff fc78 	bl	80096d8 <_free_r>
 8009de8:	e7e1      	b.n	8009dae <_realloc_r+0x1e>
 8009dea:	4635      	mov	r5, r6
 8009dec:	e7df      	b.n	8009dae <_realloc_r+0x1e>

08009dee <_malloc_usable_size_r>:
 8009dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df2:	1f18      	subs	r0, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bfbc      	itt	lt
 8009df8:	580b      	ldrlt	r3, [r1, r0]
 8009dfa:	18c0      	addlt	r0, r0, r3
 8009dfc:	4770      	bx	lr
	...

08009e00 <_init>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr

08009e0c <_fini>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr
